<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="2/17/2021 12:47:12 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="VK-C0D0E-054"
  DTS:CreatorName="I04\vk300"
  DTS:DTSID="{223B8C11-FE7F-435F-AB9B-D372DE1E2062}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.121"
  DTS:LocaleID="1044"
  DTS:ObjectName="Lokale data - Les mappe"
  DTS:PackageType="5"
  DTS:ProtectionLevel="0"
  DTS:VersionBuild="49"
  DTS:VersionGUID="{DF6857E3-1845-41B2-8092-7F3ECC0C3150}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:PackageParameters>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{4856D9D1-8F95-4A90-A469-9831F3339AE0}"
      DTS:ObjectName="Rootfolder"
      DTS:Required="True">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue"
        xml:space="preserve"></DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{36E42007-EDEA-4218-9040-EC2C38A0CE28}"
      DTS:ObjectName="Tablename">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue"
        xml:space="preserve"></DTS:Property>
    </DTS:PackageParameter>
  </DTS:PackageParameters>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Data Flow Task"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{AEA88E5C-5AC2-463A-9C50-61598E3E719E}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Data Flow Task"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1">
          <components>
            <component
              refId="Package\Data Flow Task\OLE DB Command"
              componentClassID="Microsoft.OLEDBCommand"
              contactInfo="OLE DB Command;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;2"
              description="Runs an SQL statement for each row in a data flow. For example, call a 'new employee setup' stored procedure for each row in the 'new employees' table. Note: running an SQL statement for each row of a large data flow may take a long time."
              name="OLE DB Command"
              usesDispositions="true"
              version="2">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  expressionType="Notify"
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">select 1</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Data Flow Task\OLE DB Command.Connections[OleDbConnection]"
                  connectionManagerID="{E03B5EEF-9A98-4EE4-931D-9D4F8E0460CE}:external"
                  connectionManagerRefId="Project.ConnectionManagers[Staging_ASSS]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Data Flow Task\OLE DB Command.Inputs[OLE DB Command Input]"
                  errorOrTruncationOperation="Command Execution"
                  errorRowDisposition="FailComponent"
                  hasSideEffects="true"
                  name="OLE DB Command Input">
                  <externalMetadataColumns
                    isUsed="True" />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Data Flow Task\OLE DB Command.Outputs[OLE DB Command Output]"
                  exclusionGroup="1"
                  name="OLE DB Command Output"
                  synchronousInputId="Package\Data Flow Task\OLE DB Command.Inputs[OLE DB Command Input]">
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Data Flow Task\OLE DB Command.Outputs[OLE DB Command Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="OLE DB Command Error Output"
                  synchronousInputId="Package\Data Flow Task\OLE DB Command.Inputs[OLE DB Command Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Command.Outputs[OLE DB Command Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\OLE DB Command.Outputs[OLE DB Command Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Command.Outputs[OLE DB Command Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\OLE DB Command.Outputs[OLE DB Command Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Data Flow Task\Script Component"
              componentClassID="Microsoft.ManagedComponentHost"
              contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;11"
              description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
              name="Script Component"
              version="11">
              <properties>
                <property
                  dataType="System.String"
                  description="Stores the source code of the component"
                  isArray="true"
                  name="SourceCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="30">
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.IO;
using System.Data.SqlClient;
using System.Configuration;
using System.Linq;
using System.Collections.Generic;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using System.Data.OleDb;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    private SqlConnection scn;
    private SqlDataReader sqlDataReader;
    private string sqlConnectionString;
    private Dictionary<string, string> columnMapDict;
    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        /*
         * Add your code here
         */
        sqlConnectionString = @"Data Source=vk-sxd0e-003;Initial Catalog=TEST_Staging_ASSS;Integrated Security=true";
        scn = new SqlConnection(sqlConnectionString);

        // Flytte disse ut i en egen metode eller noe tilsvarende
        columnMapDict = new Dictionary<string, string>();
        columnMapDict.Add("Regionkode", "Kommunenummer");
        columnMapDict.Add("Statistikkvariabelnavn", "Variabelnavn");
        columnMapDict.Add("Aldernavn", "aldersgrupper");
        columnMapDict.Add("Kildenavn", "Kilde");
        columnMapDict.Add("Tid", "Årgang");
        columnMapDict.Add("Verdi", "Verdi");
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    public string translatePathToDestinationTable(string folderpath)
    {
        string[] folderSplit = folderpath.Split('\\');
        int maxIndex = folderSplit.Length - 1;

        /* Var litt tidlig ute her, men kan bruke denne etter vi har endret tabellnavnene
        return "[KS_" + folderSplit[maxIndex].Remove(5) + "]";
        */
        return "KS_" + folderSplit[maxIndex];
    }

    public void readFolder(string folderpath)
    {
        string[] fileEntries = Directory.GetFiles(folderpath);
        string[] subdirectoryEntries = Directory.GetDirectories(folderpath);

        foreach (String filePath in fileEntries)
        {
            readFile(filePath, translatePathToDestinationTable(folderpath));
        }

        foreach (String subdirPath in subdirectoryEntries)
        {
            this.ComponentMetaData.FireInformation(1, "Dirpath", subdirPath, "", 0, true);
            readFolder(subdirPath);
        }
    }

    // Creates a dictionary with column names and their datatypes based on a sql table. 
    /// <summary>
    /// Queries the columns information schema to get the column names and datatypes and stores these in a dictionary
    /// </summary>
    /// <returns> 
    /// A dictionary containing with the column name as key and datatype as value
    /// </returns>
    /// <param name="tableName">A string containing the tablename of the table to query</param>
    public Dictionary<string, string> findDataTypes (string tableName)
    {
        Dictionary<string, string> dataTypes;
        SqlCommand command;
        string sqlQueryString;
        
        dataTypes = new Dictionary<string, string>();

        // Gets the column name and data type from the table in the sql db
        sqlQueryString = "select COLUMN_NAME, DATA_TYPE from INFORMATION_SCHEMA.columns where TABLE_NAME = '" + tableName + "'";
        command = new SqlCommand(sqlQueryString, scn);

        scn.Open();

        sqlDataReader = command.ExecuteReader();

        while (sqlDataReader.Read())
        {
            // Column name is at index 0, datatype is at index 1
            dataTypes.Add(sqlDataReader.GetValue(0).ToString(), sqlDataReader.GetValue(1).ToString());
        }

        sqlDataReader.Close();
        scn.Close();

        return dataTypes;
    }

    public void readFile(string filepath, string destinationTable)
    {
        this.ComponentMetaData.FireInformation(1, "Entering", "readFile", "", 0, true);
        this.ComponentMetaData.FireInformation(1, "Filepath", filepath, "", 0, true);
        this.ComponentMetaData.FireInformation(1, "Destination table", destinationTable, "", 0, true);

        string excelConnectionString = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + filepath + ";Extended Properties='Excel 8.0;HDR=Yes;IMEX=1'";
        string queryString = "select * from [Til databasen$]";

        try
        {
            OleDbDataReader reader;

            // Get the column datatypes from the table in the database
            Dictionary<string, string> columnDataTypes = findDataTypes(destinationTable);

            using (OleDbConnection connection = new OleDbConnection(excelConnectionString))
            {
                OleDbCommand command = new OleDbCommand(queryString, connection);
                //this.ComponentMetaData.FireInformation(1, "Connection", "opening", "", 0, true);
                connection.Open();
                this.ComponentMetaData.FireInformation(1, "Connection", "opened", "", 0, true);
              
                DataTable dtExcelData = new DataTable();

                this.ComponentMetaData.FireInformation(1, "Reader", "starting", "", 0, true);
                reader = command.ExecuteReader();

                // Goes through the dictionary containing the column names and type found in the database
                foreach (KeyValuePair<string, string> entry in columnDataTypes)
                {
                    this.ComponentMetaData.FireInformation(1, "Entry key", entry.Key, "", 0, true);
                    this.ComponentMetaData.FireInformation(1, "Entry value", entry.Value, "", 0, true);
                    // Switch on the datatype of the column to add columns with the correct type
                    switch (entry.Value)
                    {
                        case "varchar":
                            dtExcelData.Columns.Add(columnMapDict[entry.Key], typeof(string));
                            break;
                        case "numeric":
                            dtExcelData.Columns.Add(columnMapDict[entry.Key], typeof(decimal));
                            break;
                        case "int":
                            dtExcelData.Columns.Add(columnMapDict[entry.Key], typeof(int));
                            break;
                    }
                }

                foreach (DataColumn dc in dtExcelData.Columns)
                {
                    this.ComponentMetaData.FireInformation(1, "dtExcelData column", dc.ColumnName, "", 0, true);
                    this.ComponentMetaData.FireInformation(1, "dtExcelData type", dc.DataType.ToString(), "", 0, true);
                }

                /*
                dtExcelData.Columns.AddRange(new DataColumn[6] {
                        new DataColumn("Kommunenummer", typeof(string)),
                        new DataColumn("Variabelnavn", typeof(string)),
                        new DataColumn("aldersgrupper", typeof(string)),
                        new DataColumn("Kilde", typeof(string)),
                        new DataColumn("Årgang", typeof(string)),
                        new DataColumn("Verdi", typeof(decimal))
                        });
                */
                int columns = reader.FieldCount;
                this.ComponentMetaData.FireInformation(1, "Number of columns", columns.ToString(), "", 0, true);
                //dt.Columns.Add(new DataColumn(reader.GetName(i), typeof(string)));

                using (OleDbDataAdapter oda = new OleDbDataAdapter(queryString, connection))
                {
                    this.ComponentMetaData.FireInformation(1, "Filling DataTable", "starting...", "", 0, true);
                    oda.Fill(dtExcelData);
                    this.ComponentMetaData.FireInformation(1, "Filling DataTable", "ending...", "", 0, true);
                }
                this.ComponentMetaData.FireInformation(1, "Printing DataTable", dtExcelData.Rows.Count.ToString(), "", 0, true);
                /* while (reader.Read())
                 {
                     int range = reader.FieldCount;
                     if (dt == null)
                     {
                         dt = new DataTable();
                         for (int i = 0; i < range; i++)
                         {
                             //this.ComponentMetaData.FireInformation(1, reader.GetName(i), reader.GetValue(i).ToString(), "", 0, true);
                             this.ComponentMetaData.FireInformation(1, reader.GetName(i), "", "", 0, true);
                             
                         }
                     }

                 }*/

                this.ComponentMetaData.FireInformation(1, "Reader", "closing", "", 0, true);
                reader.Close();
                this.ComponentMetaData.FireInformation(1, "Reader", "closed", "", 0, true);

                this.ComponentMetaData.FireInformation(1, "Connection", "closing", "", 0, true);
                connection.Close();
                this.ComponentMetaData.FireInformation(1, "Connection", "closed", "", 0, true);
                OleDbConnection.ReleaseObjectPool();

                // Tilsvarende brukes i findDataTypes også. Evt. gjøre den global og sette den i preexecute?
                string tableName = "[KS_" + Variables.Tablename + "]";

                // Kan man ikke bruke scn her istedenfor new SqlConnection?
                using (SqlConnection con = new SqlConnection(sqlConnectionString))
                {
                    using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(con))
                    {
                        sqlBulkCopy.DestinationTableName = "dbo." + tableName;
                        foreach (KeyValuePair<string, string> entry in columnMapDict)
                        {
                            sqlBulkCopy.ColumnMappings.Add(entry.Value, entry.Key);
                        }
                            /*sqlBulkCopy.ColumnMappings.Add("Kommunenummer", "Regionkode");
                            sqlBulkCopy.ColumnMappings.Add("Variabelnavn", "Statistikkvariabelnavn");
                            sqlBulkCopy.ColumnMappings.Add("aldersgrupper", "Aldernavn");
                            sqlBulkCopy.ColumnMappings.Add("Kilde", "Kildenavn");
                            sqlBulkCopy.ColumnMappings.Add("Årgang", "Tid");
                            sqlBulkCopy.ColumnMappings.Add("Verdi", "Verdi");*/
                        con.Open();
                        sqlBulkCopy.WriteToServer(dtExcelData);
                        con.Close();
                    }
                }

            }
        }
        catch (Exception e)
        {
            this.ComponentMetaData.FireInformation(1, "Failed at", filepath, "", 0, true);
            this.ComponentMetaData.FireInformation(1, "FAAACK exeption sucky balls", e.ToString(), "", 0, true);
        }
    }

    public override void CreateNewOutputRows()
    {
        /*
          Add rows by calling the AddRow method on the member variable named "<Output Name>Buffer".
          For example, call MyOutputBuffer.AddRow() if your output was named "MyOutput".
        */


        // Arknavn
        // Til databasen bv

        readFolder(Variables.Rootfolder);

        Output0Buffer.AddRow();
        Output0Buffer.derp = 9000;
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Output0Buffer: ScriptBuffer

{
    public Output0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public Int32 derp
    {
        set
        {
            this[0] = value;
        }
    }
    public bool derp_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public Output0Buffer Output0Buffer;

    public virtual void FinishOutputs()
    {
    }

    private void MarkOutputsFinished()
    {

        if (null != Output0Buffer)
        {
            Output0Buffer.SetEndOfRowset();
            Output0Buffer = null;
        }

    }

    public override void PrimeOutput(int Outputs, int[] OutputIDs, PipelineBuffer[] Buffers, OutputNameMap OutputMap)
    {
       for(int Idx = 0; Idx < Outputs; Idx++)
       {
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Output 0"))
            {
                Output0Buffer = new Output0Buffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
        }

        CreateNewOutputRows();

        FinishOutputs();
        MarkOutputsFinished();

    }

    public virtual void CreateNewOutputRows()
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public String Rootfolder
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["Rootfolder"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String Tablename
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["Tablename"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_9746464a3ca94d5f86042d86985b1dd6.csproj]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{C0745717-CCEF-48F5-8927-82F7EA616589}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_9746464a3ca94d5f86042d86985b1dd6</RootNamespace>
    <AssemblyName>SC_9746464a3ca94d5f86042d86985b1dd6</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Configuration" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_9746464a3ca94d5f86042d86985b1dd6.Properties.Settings.get_Default():SC_9746464a3ca94d5f86042d86985b1dd6.Properties.Sett" +
    "ings")]

namespace SC_9746464a3ca94d5f86042d86985b1dd6.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Project]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>SC_9746464a3ca94d5f86042d86985b1dd6</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>SC_9746464a3ca94d5f86042d86985b1dd6</msb:DisplayName>
    <msb:ProjectId>{84EA5FFC-AB55-4889-9777-2D945CA5F99C}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="SC_9746464a3ca94d5f86042d86985b1dd6.csproj" />
    <msb:File Include="ComponentWrapper.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="main.cs" />
    <msb:File Include="BufferWrapper.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_9746464a3ca94d5f86042d86985b1dd6")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_9746464a3ca94d5f86042d86985b1dd6")]
[assembly: AssemblyCopyright("Copyright @  2021")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_9746464a3ca94d5f86042d86985b1dd6.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_9746464a3ca94d5f86042d86985b1dd6.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_9746464a3ca94d5f86042d86985b1dd6.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_9746464a3ca94d5f86042d86985b1dd6.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_9746464a3ca94d5f86042d86985b1dd6.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Stores the binary representation of the component"
                  isArray="true"
                  name="BinaryCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="2">
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_9746464a3ca94d5f86042d86985b1dd6.dll]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[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
mQAAAAAAAQABAAEAEACKBQAAEAABAAEAAQAQAE4HAAB1AAUACQABABAAIAoAAIEABQAPAAEAEACO
CQAAhQAIABQAAQAQAA0JAACFAAkAFQAAABAAZwjSCIUACgAYAAABEABmCdIInQAMABwAAQCBBbgB
AQAYB7wBAQC2BMABAQDbCcMBBgCOCcsBBgANCc8BBgBOB9MBAQAuCtcBAQAuCtcBEQB1BdwBEQBP
AuEBEQBFAeYBUCAAAAAAxgBTBAYAAQAIIQAAAADGAF4EBgABABAhAAAAAIYAXwHqAQEARCEAAAAA
hgA0BxAAAgC8IQAAAACGACAJ7wEDAFAiAAAAAIYAwAH5AQQAFCgAAAAAxgC5CQYABgBCKAAAAACG
GBYIBgAGAEooAAAAAIYYFghdAQYAVSgAAAAAhgjsBgEACQBkKAAAAACGCDIF/wEKAHsoAAAAAIYA
CgsGAAsAgygAAAAAhgDpCQYACwCLKAAAAACGAOwJhwALAJMoAAAAAIYYFggGAAsAsygAAAAAxgGi
CQYACwC1KAAAAACBABkBBgALANQoAAAAAMYAsQoEAgsAsygAAAAAxgG5CQYADwApKQAAAACGGBYI
EAIPADgpAAAAAIYYFggQAhAARykAAAAAhgg/B4MAEQBtKQAAAACGCPsBgwARAJMpAAAAAIMYFggG
ABEAmykAAAAAkwh4BxcCEQDHKQAAAACTCDcCHQIRAM4pAAAAAJMIQwIjAhEA1ikAAAAAlgj+CSoC
EgDdKQAAAACGGBYIBgASAOUpAAAAAJEYHAg/ARIAAAABANwEAAABANwEAAABAOIBAAABANMEAAAC
AH8BAAABAHEHAAACAC4JAAADAJsGAAABAH0EAAABAH0EAAABAKgJAAACACMIAAADAJoJAAAEAJsG
AAABAEQKAAABAEQKAAABAH0ECQAWCAEAEQAWCAYAGQAWCAoAKQAWCBAAMQAWCBAAOQAWCBAAQQAW
CBAASQAWCBAAUQAWCBAAWQAWCBAAYQAWCBAAaQAWCAYAEQEWCAYAMQEWCBUAQQEWCAYAAQFTBAYA
cQAWCBAADAAWCAYADAAVASMAAQFeBAYAUQH4CTEAUQHNCTgAWQEXCUkAWQHDCEkAAQHEAE8AYQGg
BVUAUQHNCWsAiQAWCHIAaQGFBQYAiQAmB3kAcQF0BH4ACQHKBIMAcQEQAYcAcQGSAgYAaQGSAgYA
mQAWCBAAeQEWCMEAoQAWCAYAeQEmB8gADAAICM0AFABOCt8AHAARC/EAHABqBPYAUQE8C/sAoQBv
CQEBDABcBQcBiQGuAQ4BgQEVARcBFAC9CocAyQCYAgYAqQEICCABuQBOCiUBwQDsAYMAwQAqAikB
uQC9CocAcQFkCi8BoQHKBIMA0QAWCMEAsQEtBTMBoQCwCTkBqQFaCi8BmQBKBT8B2QAWCEMB2QDJ
ARAA2QBTCUkBwQEVAU8B2QDuB1cB6QAWCF0B6QBlBWcB6QBCBQEA0QEWCBAA6QAKCwYA6QDpCQYA
6QDsCYcAAQEWCAYAAQGiAHEBAQFCCXgBCQEWCAYAAQEBCX4B2QFcBYQBAQH1CosB4QHGCpEBiQEZ
C5gBGQEWCJ4BOQEWCAYALgALAEwCLgATAFUCLgAbAHQCLgAjAH0CLgArAKYCLgAzAKYCLgA7AKYC
LgBDAH0CLgBLAKwCLgBTAKYCLgBbAMMCQwBjAA0DqQBzAHQCyQBzAHQC4wBrAA0DgQF7AA0DKwA+
AGAAiwBtAQMAAQAGAAMABwAFAAgABwAAAPAGLwIAADYFMwIAAEMHNwIAAP8BNwIAAHwHOwIAAFcC
QQIAAAIKRwIBAAoAAwABAAsABQACABYABwACABcACQACABkACwACABoADQABABsADQACABwADwAc
ANgA6gAEgAAAAQAAAAAAAAAAAAAAAAB1AAAABAAAAAAAAAAAAAAApgHsAAAAAAAOAAAAAAAAAAAA
AACvAXMKAAAAAAQAAAAAAAAAAAAAAKYBuAAAAAAADgAAAAAAAAAAAAAArwGQCgAAAAAEAAAAAAAA
AAAAAACmAW4FAAAAAA4AAAAAAAAAAAAAAK8ByAYAAAAADgAAAAAAAAAAAAAArwGlBgAAAAAAAAAA
AQAAAHEIAAAAAAAAAElEVFNDb21wb25lbnRNZXRhRGF0YTEwMABJRFRTVmFyaWFibGUxMDAASURU
U1ZhcmlhYmxlczEwMABJRFRTRXZhbHVhdG9yQ29udGV4dDEwMABJbnQzMgBLZXlWYWx1ZVBhaXJg
MgBEaWN0aW9uYXJ5YDIAU0NfOTc0NjQ2NGEzY2E5NGQ1Zjg2MDQyZDg2OTg1YjFkZDYAPE1vZHVs
ZT4AR2V0T3V0cHV0SUQAU3lzdGVtLklPAFN5c3RlbS5EYXRhAGdldF9Db21wb25lbnRNZXRhRGF0
YQBTeXN0ZW0uRGF0YS5PbGVEYgBtc2NvcmxpYgBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBS
ZWFkAEFkZABNYXJrT3V0cHV0c0ZpbmlzaGVkAE9sZURiQ29tbWFuZABTcWxDb21tYW5kAGRlZmF1
bHRJbnN0YW5jZQBEYXRhVGFibGUAdHJhbnNsYXRlUGF0aFRvRGVzdGluYXRpb25UYWJsZQBkZXN0
aW5hdGlvblRhYmxlAElEaXNwb3NhYmxlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFu
ZGxlAHJlYWRGaWxlAHNldF9EZXN0aW5hdGlvblRhYmxlTmFtZQB0YWJsZU5hbWUAZ2V0X0NvbHVt
bk5hbWUAZ2V0X1RhYmxlbmFtZQBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5QaXBlbGluZQBnZXRf
RGF0YVR5cGUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAEludGVybmFs
RGF0YUNvbGxlY3Rpb25CYXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAENsb3NlAERpc3Bvc2UA
RWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJO
b25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0
dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRl
AFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUA
QXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmli
dXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBT
U0lTU2NyaXB0Q29tcG9uZW50RW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRy
aWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAUHJlRXhlY3V0ZQBQb3N0RXhlY3V0
ZQBnZXRfVmFsdWUAR2V0VmFsdWUAdmFsdWUAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBTcWxC
dWxrQ29weUNvbHVtbk1hcHBpbmcAc3FsQ29ubmVjdGlvblN0cmluZwBUb1N0cmluZwBmaWxlcGF0
aABmb2xkZXJwYXRoAERlY2ltYWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNDXzk3NDY0NjRhM2Nh
OTRkNWY4NjA0MmQ4Njk4NWIxZGQ2LmRsbABGaWxsAHNldF9kZXJwX0lzTnVsbABTZXROdWxsAFJl
bGVhc2VPYmplY3RQb29sAGdldF9JdGVtAHNldF9JdGVtAFN5c3RlbQByZXNvdXJjZU1hbgBzY24A
T3BlbgBTY3JpcHRNYWluAERhdGFDb2x1bW4ARmlyZUluZm9ybWF0aW9uAFN5c3RlbS5Db25maWd1
cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAFNxbEJ1bGtDb3B5
Q29sdW1uTWFwcGluZ0NvbGxlY3Rpb24ARGF0YUNvbHVtbkNvbGxlY3Rpb24ARGF0YVJvd0NvbGxl
Y3Rpb24AT2xlRGJDb25uZWN0aW9uAFNxbENvbm5lY3Rpb24ASW52YWxpZE9wZXJhdGlvbkV4Y2Vw
dGlvbgBTeXN0ZW0uRGF0YS5Db21tb24AQ3VsdHVyZUluZm8AT3V0cHV0TmFtZU1hcABPdXRwdXRN
YXAATWljcm9zb2Z0LlNxbFNlcnZlci5EVFNSdW50aW1lV3JhcABNaWNyb3NvZnQuU3FsU2VydmVy
LkRUU1BpcGVsaW5lV3JhcABzZXRfZGVycABDaGFyAE9sZURiRGF0YVJlYWRlcgBTcWxEYXRhUmVh
ZGVyAHNxbERhdGFSZWFkZXIARXhlY3V0ZVJlYWRlcgByZWFkRm9sZGVyAGdldF9Sb290Zm9sZGVy
AE91dHB1dDBCdWZmZXIAUGlwZWxpbmVCdWZmZXIAU2NyaXB0QnVmZmVyAGdldF9SZXNvdXJjZU1h
bmFnZXIATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZS5XcmFwcGVyAE1pY3Jvc29mdC5T
cWxTZXJ2ZXIuRHRzLlBpcGVsaW5lLldyYXBwZXIAT2xlRGJEYXRhQWRhcHRlcgBXcml0ZVRvU2Vy
dmVyAElFbnVtZXJhdG9yAEdldEVudW1lcmF0b3IALmN0b3IALmNjdG9yAE91dHB1dElEcwBTeXN0
ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVz
b3VyY2VzAFNDXzk3NDY0NjRhM2NhOTRkNWY4NjA0MmQ4Njk4NWIxZGQ2LlByb3BlcnRpZXMuUmVz
b3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBHZXREaXJlY3RvcmllcwBTQ185NzQ2NDY0
YTNjYTk0ZDVmODYwNDJkODY5ODViMWRkNi5Qcm9wZXJ0aWVzAGdldF9SZWFkT25seVZhcmlhYmxl
cwBHZXRGaWxlcwBmaW5kRGF0YVR5cGVzAEJ1ZmZlckNvbHVtbkluZGV4ZXMAR2V0Q29sdW1uSW5k
ZXhlcwBnZXRfQ29sdW1uTWFwcGluZ3MAU2V0dGluZ3MAZ2V0X0NvbHVtbnMAU3lzdGVtLkNvbGxl
Y3Rpb25zAENvbm5lY3Rpb25zAEJ1ZmZlcnMARmluaXNoT3V0cHV0cwBnZXRfUm93cwBDcmVhdGVO
ZXdPdXRwdXRSb3dzAENvbmNhdABPYmplY3QAY29sdW1uTWFwRGljdABTZXRFbmRPZlJvd3NldABT
cGxpdABnZXRfRGVmYXVsdABTeXN0ZW0uRGF0YS5TcWxDbGllbnQAVXNlckNvbXBvbmVudABQYXJl
bnRDb21wb25lbnQAU2NyaXB0Q29tcG9uZW50AGdldF9DdXJyZW50AGdldF9Db3VudABnZXRfRmll
bGRDb3VudABNaWNyb3NvZnQuU3FsU2VydmVyLlR4U2NyaXB0AE1pY3Jvc29mdC5TcWxTZXJ2ZXIu
UGlwZWxpbmVIb3N0AFByaW1lT3V0cHV0AE1vdmVOZXh0AEdldFZhbHVlV2l0aENvbnRleHQAU2Ny
aXB0Q29tcG9uZW50RXZhbENvbnRleHQAZ2V0X0V2YWx1YXRvckNvbnRleHQAQWRkUm93AGdldF9L
ZXkAZ2V0X0Fzc2VtYmx5AFNxbEJ1bGtDb3B5AERpcmVjdG9yeQBvcF9FcXVhbGl0eQAAgKdEAGEA
dABhACAAUwBvAHUAcgBjAGUAPQB2AGsALQBzAHgAZAAwAGUALQAwADAAMwA7AEkAbgBpAHQAaQBh
AGwAIABDAGEAdABhAGwAbwBnAD0AVABFAFMAVABfAFMAdABhAGcAaQBuAGcAXwBBAFMAUwBTADsA
SQBuAHQAZQBnAHIAYQB0AGUAZAAgAFMAZQBjAHUAcgBpAHQAeQA9AHQAcgB1AGUAARVSAGUAZwBp
AG8AbgBrAG8AZABlAAAbSwBvAG0AbQB1AG4AZQBuAHUAbQBtAGUAcgAALVMAdABhAHQAaQBzAHQA
aQBrAGsAdgBhAHIAaQBhAGIAZQBsAG4AYQB2AG4AABlWAGEAcgBpAGEAYgBlAGwAbgBhAHYAbgAA
E0EAbABkAGUAcgBuAGEAdgBuAAAbYQBsAGQAZQByAHMAZwByAHUAcABwAGUAcgAAE0sAaQBsAGQA
ZQBuAGEAdgBuAAALSwBpAGwAZABlAAAHVABpAGQAAA3FAHIAZwBhAG4AZwABC1YAZQByAGQAaQAA
B0sAUwBfAAAPRABpAHIAcABhAHQAaAAAAQCApXMAZQBsAGUAYwB0ACAAQwBPAEwAVQBNAE4AXwBO
AEEATQBFACwAIABEAEEAVABBAF8AVABZAFAARQAgAGYAcgBvAG0AIABJAE4ARgBPAFIATQBBAFQA
SQBPAE4AXwBTAEMASABFAE0AQQAuAGMAbwBsAHUAbQBuAHMAIAB3AGgAZQByAGUAIABUAEEAQgBM
AEUAXwBOAEEATQBFACAAPQAgACcAAQMnAAERRQBuAHQAZQByAGkAbgBnAAARcgBlAGEAZABGAGkA
bABlAAARRgBpAGwAZQBwAGEAdABoAAAjRABlAHMAdABpAG4AYQB0AGkAbwBuACAAdABhAGIAbABl
AABdUAByAG8AdgBpAGQAZQByAD0ATQBpAGMAcgBvAHMAbwBmAHQALgBBAEMARQAuAE8ATABFAEQA
QgAuADEAMgAuADAAOwBEAGEAdABhACAAUwBvAHUAcgBjAGUAPQAAXzsARQB4AHQAZQBuAGQAZQBk
ACAAUAByAG8AcABlAHIAdABpAGUAcwA9ACcARQB4AGMAZQBsACAAOAAuADAAOwBIAEQAUgA9AFkA
ZQBzADsASQBNAEUAWAA9ADEAJwABPXMAZQBsAGUAYwB0ACAAKgAgAGYAcgBvAG0AIABbAFQAaQBs
ACAAZABhAHQAYQBiAGEAcwBlAG4AJABdAAAVQwBvAG4AbgBlAGMAdABpAG8AbgAADW8AcABlAG4A
ZQBkAAANUgBlAGEAZABlAHIAABFzAHQAYQByAHQAaQBuAGcAABNFAG4AdAByAHkAIABrAGUAeQAA
F0UAbgB0AHIAeQAgAHYAYQBsAHUAZQAAD3YAYQByAGMAaABhAHIAAA9uAHUAbQBlAHIAaQBjAAAH
aQBuAHQAACVkAHQARQB4AGMAZQBsAEQAYQB0AGEAIABjAG8AbAB1AG0AbgAAIWQAdABFAHgAYwBl
AGwARABhAHQAYQAgAHQAeQBwAGUAACNOAHUAbQBiAGUAcgAgAG8AZgAgAGMAbwBsAHUAbQBuAHMA
ACNGAGkAbABsAGkAbgBnACAARABhAHQAYQBUAGEAYgBsAGUAABdzAHQAYQByAHQAaQBuAGcALgAu
AC4AABNlAG4AZABpAG4AZwAuAC4ALgAAJVAAcgBpAG4AdABpAG4AZwAgAEQAYQB0AGEAVABhAGIA
bABlAAAPYwBsAG8AcwBpAG4AZwAADWMAbABvAHMAZQBkAAAJWwBLAFMAXwAAA10AAAlkAGIAbwAu
AAATRgBhAGkAbABlAGQAIABhAHQAADdGAEEAQQBBAEMASwAgAGUAeABlAHAAdABpAG8AbgAgAHMA
dQBjAGsAeQAgAGIAYQBsAGwAcwAAgJtJAHMATgB1AGwAbAAgAHAAcgBvAHAAZQByAHQAeQAgAGMA
YQBuAG4AbwB0ACAAYgBlACAAcwBlAHQAIAB0AG8AIABGAGEAbABzAGUALgAgAEEAcwBzAGkAZwBu
ACAAYQAgAHYAYQBsAHUAZQAgAHQAbwAgAHQAaABlACAAYwBvAGwAdQBtAG4AIABpAG4AcwB0AGUA
YQBkAC4AABFPAHUAdABwAHUAdAAgADAAABVSAG8AbwB0AGYAbwBsAGQAZQByAAATVABhAGIAbABl
AG4AYQBtAGUAAHFTAEMAXwA5ADcANAA2ADQANgA0AGEAMwBjAGEAOQA0AGQANQBmADgANgAwADQA
MgBkADgANgA5ADgANQBiADEAZABkADYALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1
AHIAYwBlAHMAAFDfqcyFWsFMlteRdgf1HcoABCABAQgDIAABBSABARERBCABAQ4GIAEBEYCVBhUS
QQIODgcgAgETABMBBQcCHQ4IBiABHQ4dAwUAAg4ODgoHBh0OHQ4IDg4CBQABHQ4OBSAAEoCxCiAG
AQgODg4IEAIKBwIVEkECDg4SRQYAAw4ODg4GIAIBDhI5BCAAEj0EIAEcCAMgAA4DIAACNQcVDg4C
EkkVEkECDg4STRJRCA4VEVUCDg4VEVkCDg4OEl0SYRJlEmkIEjkSbRURWQIODhJxBiACAQ4STQQg
ABJJCiAAFRFVAhMAEwEGFRFVAg4OCiAAFRFZAhMAEwEGFRFZAg4OBCAAEwAEIAATAQUAAgIODgUg
ABKAwQYgARMBEwAIAAESgMURgMkIIAISYQ4SgMUEIAASXQMgABwFIAASgMUDIAAIBSABCBJRBSAA
EoDdAwAAAQUgAQESOQUgABKA4QcgAhKA5Q4OBSABARJRCSADARJ5HQgSfQUgAgEIHAMHAQgGAAII
En0OBSABHQgIBSAAEoDtBiABEoDxHAUAABKA9QYgARwSgPkFIAASgP0HIAIBDhKA/Qi3elxWGTTg
iQiJhF3NgIDMkQMGEjkDBhI9AgYOBwYVEkECDg4DBhIUAwYSGAMGEgwEBhKAgQQGEoCNBAYSgJED
BhIgBCABDg4JIAEVEkECDg4OBSACAQ4OBCABAQILIAQBCB0IHRJ5En0GIAEBEoCBBQAAEoCNBQAA
EoCRBgABARKAkQQAABIgAygACAMoAAIDKAAOBQgAEoCNBQgAEoCRBAgAEiAIAQAIAAAAAAAeAQAB
AFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEAI1NDXzk3NDY0NjRhM2NhOTRk
NWY4NjA0MmQ4Njk4NWIxZGQ2AAAFAQAAAAAWAQARQ29weXJpZ2h0IEAgIDIwMjEAAEkBABouTkVU
RnJhbWV3b3JrLFZlcnNpb249djQuNQEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUSLk5FVCBGcmFt
ZXdvcmsgNC41BAEAAAAAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJj
ZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJs
aWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291
cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAADMSAAAAAAAAAAAAADmSAAAACAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAA2EgAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUA
IAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgA
AIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAA7AMA
AAAAAAAAAAAA7AM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEA
AAABAAAAAAAAAAEAAAAAAD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBG
AGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBEwD
AAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAACgDAAABADAAMAAwADAAMAA0AGIAMAAA
ABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUA
AAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBDAF8AOQA3
ADQANgA0ADYANABhADMAYwBhADkANABkADUAZgA4ADYAMAA0ADIAZAA4ADYAOQA4ADUAYgAxAGQA
ZAA2AAAAMAAIAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADAALgAwAAAAcAAo
AAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAEMAXwA5ADcANAA2ADQANgA0AGEAMwBjAGEA
OQA0AGQANQBmADgANgAwADQAMgBkADgANgA5ADgANQBiADEAZABkADYALgBkAGwAbAAAAEgAEgAB
AEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAAQAAgACAA
MgAwADIAMQAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAAAAAAAAAAeAAo
AAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAQwBfADkANwA0ADYANAA2ADQA
YQAzAGMAYQA5ADQAZAA1AGYAOAA2ADAANAAyAGQAOAA2ADkAOAA1AGIAMQBkAGQANgAuAGQAbABs
AAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAEMAXwA5ADcANAA2ADQANgA0AGEA
MwBjAGEAOQA0AGQANQBmADgANgAwADQAMgBkADgANgA5ADgANQBiADEAZABkADYAAAA0AAgAAQBQ
AHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAALgAwAAAAOAAIAAEAQQBzAHMA
ZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AMAAuADAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADAAAAPg4AAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                  name="VSTAProjectName"
                  typeConverter="NOTBROWSABLE">SC_9746464a3ca94d5f86042d86985b1dd6</property>
                <property
                  dataType="System.String"
                  description="Specifies the programming language used by the script."
                  name="ScriptLanguage"
                  typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read-only variables."
                  name="ReadOnlyVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg">$Package::Rootfolder,$Package::Tablename</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read/write variables."
                  name="ReadWriteVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="List of breakpoints present on the script."
                  isArray="true"
                  name="BreakpointCollection"
                  typeConverter="NOTBROWSABLE">
                  <arrayElements
                    arrayElementCount="0" />
                </property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataChecksum140"
                  typeConverter="NOTBROWSABLE">E6</property>
                <property
                  dataType="System.String"
                  name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
              </properties>
              <outputs>
                <output
                  refId="Package\Data Flow Task\Script Component.Outputs[Output 0]"
                  hasSideEffects="true"
                  name="Output 0">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\Script Component.Outputs[Output 0].Columns[derp]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\Script Component.Outputs[Output 0].Columns[derp]"
                      name="derp" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Data Flow Task.Paths[Output 0]"
              endId="Package\Data Flow Task\OLE DB Command.Inputs[OLE DB Command Input]"
              name="Output 0"
              startId="Package\Data Flow Task\Script Component.Outputs[Output 0]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="150,42"
          Id="Package\Data Flow Task"
          TopLeft="305.142862339409,149.270590328758" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Data Flow Task">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="162,42"
          Id="Package\Data Flow Task\Script Component"
          TopLeft="294.28571929737,115.623531033341" />
        <NodeLayout
          Size="166,42"
          Id="Package\Data Flow Task\OLE DB Command"
          TopLeft="290,249" />
        <EdgeLayout
          Id="Package\Data Flow Task.Paths[Output 0]"
          TopLeft="374.142859648685,157.223531033341">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,91.7764689666594"
              Start="0,0"
              End="0,84.2764689666594">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,84.2764689666594" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>