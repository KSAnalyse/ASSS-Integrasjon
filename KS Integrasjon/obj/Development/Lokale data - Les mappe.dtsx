<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="2/17/2021 12:47:12 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="VK-C0D0E-054"
  DTS:CreatorName="I04\vk300"
  DTS:DTSID="{223B8C11-FE7F-435F-AB9B-D372DE1E2062}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.166"
  DTS:LocaleID="1044"
  DTS:ObjectName="Lokale data - Les mappe"
  DTS:PackageType="5"
  DTS:ProtectionLevel="0"
  DTS:VersionBuild="79"
  DTS:VersionGUID="{2AE4EFE8-468C-4662-A91A-914767C83D10}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:PackageParameters>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{4856D9D1-8F95-4A90-A469-9831F3339AE0}"
      DTS:ObjectName="Rootfolder"
      DTS:Required="True">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue"
        xml:space="preserve"></DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{36E42007-EDEA-4218-9040-EC2C38A0CE28}"
      DTS:ObjectName="Tablename">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue"
        xml:space="preserve"></DTS:Property>
    </DTS:PackageParameter>
  </DTS:PackageParameters>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Data Flow Task"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{AEA88E5C-5AC2-463A-9C50-61598E3E719E}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Data Flow Task"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1">
          <components>
            <component
              refId="Package\Data Flow Task\OLE DB Command"
              componentClassID="Microsoft.OLEDBCommand"
              contactInfo="OLE DB Command;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;2"
              description="Runs an SQL statement for each row in a data flow. For example, call a 'new employee setup' stored procedure for each row in the 'new employees' table. Note: running an SQL statement for each row of a large data flow may take a long time."
              name="OLE DB Command"
              usesDispositions="true"
              version="2">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  expressionType="Notify"
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">select 1</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Data Flow Task\OLE DB Command.Connections[OleDbConnection]"
                  connectionManagerID="{E03B5EEF-9A98-4EE4-931D-9D4F8E0460CE}:external"
                  connectionManagerRefId="Project.ConnectionManagers[Staging_ASSS]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Data Flow Task\OLE DB Command.Inputs[OLE DB Command Input]"
                  errorOrTruncationOperation="Command Execution"
                  errorRowDisposition="FailComponent"
                  hasSideEffects="true"
                  name="OLE DB Command Input">
                  <externalMetadataColumns
                    isUsed="True" />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Data Flow Task\OLE DB Command.Outputs[OLE DB Command Output]"
                  exclusionGroup="1"
                  name="OLE DB Command Output"
                  synchronousInputId="Package\Data Flow Task\OLE DB Command.Inputs[OLE DB Command Input]">
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Data Flow Task\OLE DB Command.Outputs[OLE DB Command Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="OLE DB Command Error Output"
                  synchronousInputId="Package\Data Flow Task\OLE DB Command.Inputs[OLE DB Command Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Command.Outputs[OLE DB Command Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\OLE DB Command.Outputs[OLE DB Command Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Command.Outputs[OLE DB Command Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\OLE DB Command.Outputs[OLE DB Command Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Data Flow Task\Script Component"
              componentClassID="Microsoft.ManagedComponentHost"
              contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;11"
              description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
              name="Script Component"
              version="11">
              <properties>
                <property
                  dataType="System.String"
                  description="Stores the source code of the component"
                  isArray="true"
                  name="SourceCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="30">
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.IO;
using System.Data.SqlClient;
using System.Configuration;
using System.Linq;
using System.Collections.Generic;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using System.Data.OleDb;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    private SqlConnection scn;
    private SqlDataReader sqlDataReader;
    private string sqlConnectionString;
    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        /*
         * Add your code here
         */
        sqlConnectionString = @"Data Source=vk-sxd0e-003;Initial Catalog=TEST_Staging_ASSS;Integrated Security=true";
        scn = new SqlConnection(sqlConnectionString);
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    public string translatePathToDestinationTable(string folderpath)
    {
        string[] folderSplit = folderpath.Split('\\');
        int maxIndex = folderSplit.Length - 1;

        /* Var litt tidlig ute her, men kan bruke denne etter vi har endret tabellnavnene
        return "[KS_" + folderSplit[maxIndex].Remove(5) + "]";
        */
        return "KS_" + folderSplit[maxIndex];
    }

    public void readFolder(string folderpath)
    {
        string[] fileEntries = Directory.GetFiles(folderpath);
        string[] subdirectoryEntries = Directory.GetDirectories(folderpath);

        foreach (String filePath in fileEntries)
        {
            readFile(filePath, translatePathToDestinationTable(folderpath));
        }

        foreach (String subdirPath in subdirectoryEntries)
        {
            this.ComponentMetaData.FireInformation(1, "Dirpath", subdirPath, "", 0, true);
            readFolder(subdirPath);
        }
    }

    // Creates a dictionary with column names and their datatypes based on a sql table. 
    /// <summary>
    /// Queries the columns information schema to get the column names and datatypes and stores these in a dictionary
    /// </summary>
    /// <returns> 
    /// A dictionary containing with the column name as key and datatype as value
    /// </returns>
    /// <param name="tableName">A string containing the tablename of the table to query</param>
    public Dictionary<string, string> findDataTypes (string tableName)
    {
        Dictionary<string, string> dataTypes;
        SqlCommand command;
        SqlConnection scn;
        string sqlQueryString;
        
        dataTypes = new Dictionary<string, string>();

        // Gets the column name and data type from the table in the sql db
        sqlQueryString = "select COLUMN_NAME, DATA_TYPE from INFORMATION_SCHEMA.columns where TABLE_NAME = '" + tableName + "'";
        scn = new SqlConnection(sqlConnectionString);
        command = new SqlCommand(sqlQueryString, scn);

        scn.Open();

        sqlDataReader = command.ExecuteReader();

        while (sqlDataReader.Read())
        {
            // Column name is at index 0, datatype is at index 1
            dataTypes.Add(sqlDataReader.GetValue(0).ToString(), sqlDataReader.GetValue(1).ToString());
        }

        sqlDataReader.Close();
        scn.Close();
        command.Dispose();

        return dataTypes;
    }

    public void createTable()
    {

    }

    public void readFile(string filepath, string destinationTable)
    {
        string deleteString;
        SqlConnection scn;
        this.ComponentMetaData.FireInformation(1, "Entering", "readFile", "", 0, true);
        this.ComponentMetaData.FireInformation(1, "Filepath", filepath, "", 0, true);
        this.ComponentMetaData.FireInformation(1, "Destination table", destinationTable, "", 0, true);

        string excelConnectionString = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + filepath + ";Extended Properties='Excel 8.0;HDR=Yes;IMEX=1'";
        string queryString = "select * from [Til databasen$]";

        try
        {
            OleDbDataReader reader;
            scn = new SqlConnection(sqlConnectionString);
            // Get the column datatypes from the table in the database
            Dictionary<string, string> columnDataTypes = findDataTypes(destinationTable);

            using (OleDbConnection connection = new OleDbConnection(excelConnectionString))
            {
                OleDbCommand command = new OleDbCommand(queryString, connection);
                //this.ComponentMetaData.FireInformation(1, "Connection", "opening", "", 0, true);
                connection.Open();
                this.ComponentMetaData.FireInformation(1, "Connection", "opened", "", 0, true);
              
                DataTable dtExcelData = new DataTable();

                this.ComponentMetaData.FireInformation(1, "Reader", "starting", "", 0, true);
                reader = command.ExecuteReader();

                // Goes through the dictionary containing the column names and type found in the database
                foreach (KeyValuePair<string, string> entry in columnDataTypes)
                {
                    this.ComponentMetaData.FireInformation(1, "Entry key", entry.Key, "", 0, true);
                    this.ComponentMetaData.FireInformation(1, "Entry value", entry.Value, "", 0, true);
                    // Switch on the datatype of the column to add columns with the correct type
                    switch (entry.Value)
                    {
                        case "varchar":
                            dtExcelData.Columns.Add(entry.Key, typeof(string));
                            break;
                        case "numeric":
                            dtExcelData.Columns.Add(entry.Key, typeof(decimal));
                            break;
                        case "int":
                            dtExcelData.Columns.Add(entry.Key, typeof(int));
                            break;
                    }
                }

                using (OleDbDataAdapter oda = new OleDbDataAdapter(queryString, connection))
                {
                    this.ComponentMetaData.FireInformation(1, "Filling DataTable", "starting...", "", 0, true);
                    oda.Fill(dtExcelData);
                    this.ComponentMetaData.FireInformation(1, "Filling DataTable", "ending...", "", 0, true);
                }

                int index = dtExcelData.Columns.IndexOf("Tid");
                deleteString = "DELETE FROM [" + destinationTable + "] WHERE Tid = '" + dtExcelData.Rows[0].ItemArray.GetValue(index).ToString() + "'";
                this.ComponentMetaData.FireInformation(1, "Delete string", deleteString, "", 0, true);

                this.ComponentMetaData.FireInformation(1, "Reader", "closing", "", 0, true);
                reader.Close();
                this.ComponentMetaData.FireInformation(1, "Reader", "closed", "", 0, true);

                this.ComponentMetaData.FireInformation(1, "Connection", "closing", "", 0, true);
                connection.Close();
                this.ComponentMetaData.FireInformation(1, "Connection", "closed", "", 0, true);
                OleDbConnection.ReleaseObjectPool();

                // Tilsvarende brukes i findDataTypes også. Evt. gjøre den global og sette den i preexecute?
                string tableName = "[" + destinationTable + "]";
                SqlCommand sqlcommand = new SqlCommand(deleteString, scn);
                scn.Open();
                sqlcommand.ExecuteNonQuery();
                scn.Close();
                // Kan man ikke bruke scn her istedenfor new SqlConnection?
                using (SqlConnection con = new SqlConnection(sqlConnectionString))
                {
                    using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(con))
                    {
                        sqlBulkCopy.DestinationTableName = "dbo." + tableName;
                        foreach (KeyValuePair<string, string> entry in columnDataTypes)
                        {
                            this.ComponentMetaData.FireInformation(1, "Bulkcopy", entry.Key, "", 0, true);
                            sqlBulkCopy.ColumnMappings.Add(entry.Key, entry.Key);
                        }
                        con.Open();
                        sqlBulkCopy.WriteToServer(dtExcelData);
                        con.Close();
                    }
                }

            }
        }
        catch (Exception e)
        {
            this.ComponentMetaData.FireInformation(1, "Failed at", filepath, "", 0, true);
            this.ComponentMetaData.FireInformation(1, "FAAACK exeption sucky balls", e.ToString(), "", 0, true);
        }
    }

    public override void CreateNewOutputRows()
    {
        /*
          Add rows by calling the AddRow method on the member variable named "<Output Name>Buffer".
          For example, call MyOutputBuffer.AddRow() if your output was named "MyOutput".
        */


        // Arknavn
        // Til databasen bv

        readFolder(Variables.Rootfolder);

        Output0Buffer.AddRow();
        Output0Buffer.derp = 9000;
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Output0Buffer: ScriptBuffer

{
    public Output0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public Int32 derp
    {
        set
        {
            this[0] = value;
        }
    }
    public bool derp_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public Output0Buffer Output0Buffer;

    public virtual void FinishOutputs()
    {
    }

    private void MarkOutputsFinished()
    {

        if (null != Output0Buffer)
        {
            Output0Buffer.SetEndOfRowset();
            Output0Buffer = null;
        }

    }

    public override void PrimeOutput(int Outputs, int[] OutputIDs, PipelineBuffer[] Buffers, OutputNameMap OutputMap)
    {
       for(int Idx = 0; Idx < Outputs; Idx++)
       {
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Output 0"))
            {
                Output0Buffer = new Output0Buffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
        }

        CreateNewOutputRows();

        FinishOutputs();
        MarkOutputsFinished();

    }

    public virtual void CreateNewOutputRows()
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public String Rootfolder
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["Rootfolder"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String Tablename
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["Tablename"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_9746464a3ca94d5f86042d86985b1dd6.csproj]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{C0745717-CCEF-48F5-8927-82F7EA616589}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_9746464a3ca94d5f86042d86985b1dd6</RootNamespace>
    <AssemblyName>SC_9746464a3ca94d5f86042d86985b1dd6</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Configuration" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_9746464a3ca94d5f86042d86985b1dd6.Properties.Settings.get_Default():SC_9746464a3ca94d5f86042d86985b1dd6.Properties.Sett" +
    "ings")]

namespace SC_9746464a3ca94d5f86042d86985b1dd6.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Project]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>SC_9746464a3ca94d5f86042d86985b1dd6</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>SC_9746464a3ca94d5f86042d86985b1dd6</msb:DisplayName>
    <msb:ProjectId>{2F5E5D60-85C3-4575-BF3C-E2ABC22FA7F2}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="SC_9746464a3ca94d5f86042d86985b1dd6.csproj" />
    <msb:File Include="ComponentWrapper.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="main.cs" />
    <msb:File Include="BufferWrapper.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_9746464a3ca94d5f86042d86985b1dd6")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_9746464a3ca94d5f86042d86985b1dd6")]
[assembly: AssemblyCopyright("Copyright @  2021")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_9746464a3ca94d5f86042d86985b1dd6.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_9746464a3ca94d5f86042d86985b1dd6.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_9746464a3ca94d5f86042d86985b1dd6.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_9746464a3ca94d5f86042d86985b1dd6.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_9746464a3ca94d5f86042d86985b1dd6.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Stores the binary representation of the component"
                  isArray="true"
                  name="BinaryCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="2">
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_9746464a3ca94d5f86042d86985b1dd6.dll]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[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
AihMAAAKKq5+CQAABC0ecnQFAHDQBwAAAigvAAAKb1EAAApzUgAACoAJAAAEfgkAAAQqGn4KAAAE
Kh4CgAoAAAQqGn4LAAAEKh4CKFMAAAoqLnMeAAAGgAsAAAQqAAAAQlNKQgEAAQAAAAAADAAAAHY0
LjAuMzAzMTkAAAAABQBsAAAAMAgAACN+AACcCAAADAsAACNTdHJpbmdzAAAAAKgTAADoBQAAI1VT
AJAZAAAQAAAAI0dVSUQAAACgGQAACAMAACNCbG9iAAAAAAAAAAIAAAFXFaIJCQEAAAD6ATMAFgAA
AQAAAEEAAAAIAAAACwAAAB8AAAARAAAAUwAAABAAAAAFAAAABAAAAAcAAAAIAAAAAwAAAAEAAAAH
AAAAAQAAAAAA5wQBAAAAAAAGAHsDFggGAA8EFggGAMcCAwgPAIoIAAAGAPQCvAUGAF4DvAUGAD8D
vAUGAPYDvAUGAJsDvAUGALQDvAUGAAsDvAUGACYDZQQKAM8DBgIOACgGvwkOAOwGvwkGAGgA9QAO
ADoBvwkOANwG2gAOABgG2gAOAFUBuABDAOEHAAAGAFkA9QAOAL8H2gAOANgKvwkGAEYGUAUKAE0H
BgISAD4HBgIKAG8GBgIKAPMJBgIGAJcJUAUGAKoCAwgGAF4HNggGAGMGpwUWAHoC0QQWANsC0QQW
AFQCkgUGAI8CFggGANcGUAUGAK4EUAUGAPQKrgAaAAEAlgcOABsGUAYOAN8GUAYWAPkJ0QQOAC0B
2gAOAPEFuAAGACcCUAUGAKgBUAUOAHcFuAAGAMkEUAUGAFMAUAUGAJwBUAUOAMIHUAYOAAYGuAAO
AKYKuAAGAL0KUAUOADABUAYOAM4FvwkOAH8EvwkGADYGUAUeACoAbgceABoAbgd3AHYKAAAeADsA
bgcGAM8KvAUAAAAAmQAAAAAAAQABAAEAEABsBQAAEAABAAEAAQAQADAHAABpAAQACgABABAA1QkA
AHUABAAQAAEAEABRCQAAeQAHABUAAQAQAOMIAAB5AAgAFgAAABAAPQioCHkACQAZAAABEAA8CagI
kQALAB0AAQBjBbgBAQD6BrwBAQCYBMABBgBRCcMBBgDjCMcBBgAwB8sBAQDjCc8BAQDjCc8BEQBX
BdMBEQBEAtgBEQBFAd0BUCAAAAAAxgAtBAYAAQB0IAAAAADGADgEBgABAHwgAAAAAIYAawHhAQEA
sCAAAAAAhgAWBxAAAgAoIQAAAACGAPYI5gEDAL8hAAAAAIYAXwEGAAQAxCEAAAAAhgDMAfABBAA0
JwAAAADGAHwJBgAGAGInAAAAAIYY7AcGAAYAaicAAAAAhhjsB10BBgB1JwAAAACGCM4GAQAJAIQn
AAAAAIYIFAX2AQoAmycAAAAAhgCuCgYACwCjJwAAAACGAJ4JBgALAKsnAAAAAIYAoQmJAAsAsycA
AAAAhhjsBwYACwC/IQAAAADGAWUJBgALANMnAAAAAIEAGQEGAAsA8CcAAAAAxgBNCvsBCwC/IQAA
AADGAXwJBgAPAEUoAAAAAIYY7AcHAg8AVCgAAAAAhhjsBwcCEABjKAAAAACGCCEHfQARAIkoAAAA
AIYI+AF9ABEArygAAAAAgxjsBwYAEQC3KAAAAACTCFoHDQIRAOMoAAAAAJMILAITAhEA6igAAAAA
kwg4AhkCEQDyKAAAAACWCLMJIAISAPkoAAAAAIYY7AcGABIAASkAAAAAkRjyBzsBEgAAAAEAvgQA
AAEAvgQAAAEA7gEAAAEAtQQAAAIAiwEAAAEAUwcAAAIABAkAAAMAfQYAAAEAVwQAAAEAVwQAAAEA
awkAAAIA+QcAAAMAXQkAAAQAfQYAAAEA+QkAAAEA+QkAAAEAVwQJAOwHAQARAOwHBgAZAOwHCgAp
AOwHEAAxAOwHEAA5AOwHEABBAOwHEABJAOwHEABRAOwHEABZAOwHEABhAOwHEABpAOwHBgD5AOwH
BgAZAewHFQApAewHBgDpAC0EBgBxAOwHEADpADgEBgA5Aa0JIgA5AZAJKQBBAe0IOgBBAZkIOgDp
AMQAQABJAYIFRgAMAOwHBgA5AZAJZQCJAOwHbABRAWcFBgCJAAgHcwBZAU4EeADxAKwEfQAMABUB
gQBZARABiQBZAWwCBgBRAWwCBgBhAXICBgCZAOwHEABpAewHvwChAOwHBgBpAQgHxgAMAN4HywAU
AAMK3QAcAMMK7wAcAEQE9AA5Af4K+QChAEUJ/wB5AboBBQFxARUBDgEUAFkKiQChAXICBgC5AOwH
vwCpAQ8FGAFxAV0EHgGhAHMJIwGxAT4FKQG5AbUKMAHBAU4EeAA5AZAJNQGZACwFOwHJAeQKPwHB
AOwHQwHBANUBEADBACkJSQHRARUBTwHBANAHVwHRAOwHXQHRAEcFZwHRACQFAQDhAewHEADRAK4K
BgDRAJ4JBgDRAKEJiQDpAOwHBgDpAKIAcQHpABgJeAHxAOwHBgDpANcIfgHpAT4FhAHpAJEKiwHx
AWIKkQF5AcsKmAEBAewHngEhAewHBgAuAAsAQgIuABMASwIuABsAagIuACMAcwIuACsAnAIuADMA
nAIuADsAnAIuAEMAcwIuAEsAogIuAFMAnAIuAFsAuQJDAGMAAwOpAHMAagLJAHMAagLjAGsAAwNh
AXsAAwMcAC8AUQCNAG0BAwABAAYAAwAHAAUACAAHAAAA0gYlAgAAGAUpAgAAJQctAgAA/AEtAgAA
XgcxAgAATAI3AgAAtwk9AgEACwADAAEADAAFAAIAFwAHAAIAGAAJAAIAGgALAAIAGwANAAEAHAAN
AAIAHQAPAF4A1gDoAASAAAABAAAAAAAAAAAAAAAAAHUAAAAEAAAAAAAAAAAAAACmAewAAAAAAA4A
AAAAAAAAAAAAAK8BDwoAAAAABAAAAAAAAAAAAAAApgG4AAAAAAAOAAAAAAAAAAAAAACvASwKAAAA
AAQAAAAAAAAAAAAAAKYBUAUAAAAADgAAAAAAAAAAAAAArwGqBgAAAAAOAAAAAAAAAAAAAACvAYcG
AAAAAAAAAAABAAAARwgAAAAAAAAASURUU0NvbXBvbmVudE1ldGFEYXRhMTAwAElEVFNWYXJpYWJs
ZTEwMABJRFRTVmFyaWFibGVzMTAwAElEVFNFdmFsdWF0b3JDb250ZXh0MTAwAEludDMyAEtleVZh
bHVlUGFpcmAyAERpY3Rpb25hcnlgMgBTQ185NzQ2NDY0YTNjYTk0ZDVmODYwNDJkODY5ODViMWRk
NgA8TW9kdWxlPgBHZXRPdXRwdXRJRABTeXN0ZW0uSU8AU3lzdGVtLkRhdGEAZ2V0X0NvbXBvbmVu
dE1ldGFEYXRhAFN5c3RlbS5EYXRhLk9sZURiAG1zY29ybGliAFN5c3RlbS5Db2xsZWN0aW9ucy5H
ZW5lcmljAFJlYWQAQWRkAE1hcmtPdXRwdXRzRmluaXNoZWQAT2xlRGJDb21tYW5kAFNxbENvbW1h
bmQAZGVmYXVsdEluc3RhbmNlAERhdGFUYWJsZQBjcmVhdGVUYWJsZQB0cmFuc2xhdGVQYXRoVG9E
ZXN0aW5hdGlvblRhYmxlAGRlc3RpbmF0aW9uVGFibGUASURpc3Bvc2FibGUAUnVudGltZVR5cGVI
YW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAcmVhZEZpbGUAc2V0X0Rlc3RpbmF0aW9uVGFibGVOYW1l
AHRhYmxlTmFtZQBnZXRfVGFibGVuYW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlBpcGVsaW5l
AFR5cGUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAEFwcGxpY2F0aW9u
U2V0dGluZ3NCYXNlAENsb3NlAERpc3Bvc2UARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJH
ZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxl
QXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRl
AEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3Nl
bWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBD
b21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBB
c3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0Q29tcG9uZW50RW50cnlQb2ludEF0
dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRy
aWJ1dGUAUHJlRXhlY3V0ZQBQb3N0RXhlY3V0ZQBnZXRfVmFsdWUAR2V0VmFsdWUAdmFsdWUASW5k
ZXhPZgBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFNxbEJ1bGtDb3B5Q29sdW1uTWFwcGluZwBz
cWxDb25uZWN0aW9uU3RyaW5nAFRvU3RyaW5nAGZpbGVwYXRoAGZvbGRlcnBhdGgARGVjaW1hbABT
eXN0ZW0uQ29tcG9uZW50TW9kZWwAU0NfOTc0NjQ2NGEzY2E5NGQ1Zjg2MDQyZDg2OTg1YjFkZDYu
ZGxsAEZpbGwAc2V0X2RlcnBfSXNOdWxsAFNldE51bGwAUmVsZWFzZU9iamVjdFBvb2wAZ2V0X0l0
ZW0Ac2V0X0l0ZW0AU3lzdGVtAHJlc291cmNlTWFuAHNjbgBPcGVuAFNjcmlwdE1haW4ARGF0YUNv
bHVtbgBGaXJlSW5mb3JtYXRpb24AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6
YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24AU3FsQnVsa0NvcHlDb2x1bW5NYXBwaW5nQ29sbGVjdGlv
bgBEYXRhQ29sdW1uQ29sbGVjdGlvbgBEYXRhUm93Q29sbGVjdGlvbgBPbGVEYkNvbm5lY3Rpb24A
U3FsQ29ubmVjdGlvbgBJbnZhbGlkT3BlcmF0aW9uRXhjZXB0aW9uAFN5c3RlbS5EYXRhLkNvbW1v
bgBDdWx0dXJlSW5mbwBPdXRwdXROYW1lTWFwAE91dHB1dE1hcABNaWNyb3NvZnQuU3FsU2VydmVy
LkRUU1J1bnRpbWVXcmFwAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRFRTUGlwZWxpbmVXcmFwAHNldF9k
ZXJwAENoYXIAT2xlRGJEYXRhUmVhZGVyAFNxbERhdGFSZWFkZXIAc3FsRGF0YVJlYWRlcgBFeGVj
dXRlUmVhZGVyAHJlYWRGb2xkZXIAZ2V0X1Jvb3Rmb2xkZXIAT3V0cHV0MEJ1ZmZlcgBQaXBlbGlu
ZUJ1ZmZlcgBTY3JpcHRCdWZmZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBNaWNyb3NvZnQuU3FsU2Vy
dmVyLkR0cy5SdW50aW1lLldyYXBwZXIATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUGlwZWxpbmUu
V3JhcHBlcgBPbGVEYkRhdGFBZGFwdGVyAFdyaXRlVG9TZXJ2ZXIAR2V0RW51bWVyYXRvcgAuY3Rv
cgAuY2N0b3IAT3V0cHV0SURzAFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0uUnVudGltZS5Db21w
aWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU0NfOTc0NjQ2NGEzY2E5NGQ1Zjg2MDQyZDg2
OTg1YjFkZDYuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAEdl
dERpcmVjdG9yaWVzAFNDXzk3NDY0NjRhM2NhOTRkNWY4NjA0MmQ4Njk4NWIxZGQ2LlByb3BlcnRp
ZXMAZ2V0X1JlYWRPbmx5VmFyaWFibGVzAEdldEZpbGVzAGZpbmREYXRhVHlwZXMAQnVmZmVyQ29s
dW1uSW5kZXhlcwBHZXRDb2x1bW5JbmRleGVzAGdldF9Db2x1bW5NYXBwaW5ncwBTZXR0aW5ncwBn
ZXRfQ29sdW1ucwBDb25uZWN0aW9ucwBCdWZmZXJzAEZpbmlzaE91dHB1dHMAZ2V0X1Jvd3MAQ3Jl
YXRlTmV3T3V0cHV0Um93cwBDb25jYXQAT2JqZWN0AFNldEVuZE9mUm93c2V0AFNwbGl0AGdldF9E
ZWZhdWx0AFN5c3RlbS5EYXRhLlNxbENsaWVudABVc2VyQ29tcG9uZW50AFBhcmVudENvbXBvbmVu
dABTY3JpcHRDb21wb25lbnQAZ2V0X0N1cnJlbnQATWljcm9zb2Z0LlNxbFNlcnZlci5UeFNjcmlw
dABNaWNyb3NvZnQuU3FsU2VydmVyLlBpcGVsaW5lSG9zdABQcmltZU91dHB1dABNb3ZlTmV4dABH
ZXRWYWx1ZVdpdGhDb250ZXh0AFNjcmlwdENvbXBvbmVudEV2YWxDb250ZXh0AGdldF9FdmFsdWF0
b3JDb250ZXh0AERhdGFSb3cAQWRkUm93AGdldF9JdGVtQXJyYXkAZ2V0X0tleQBnZXRfQXNzZW1i
bHkAU3FsQnVsa0NvcHkARXhlY3V0ZU5vblF1ZXJ5AERpcmVjdG9yeQBvcF9FcXVhbGl0eQAAAACA
p0QAYQB0AGEAIABTAG8AdQByAGMAZQA9AHYAawAtAHMAeABkADAAZQAtADAAMAAzADsASQBuAGkA
dABpAGEAbAAgAEMAYQB0AGEAbABvAGcAPQBUAEUAUwBUAF8AUwB0AGEAZwBpAG4AZwBfAEEAUwBT
AFMAOwBJAG4AdABlAGcAcgBhAHQAZQBkACAAUwBlAGMAdQByAGkAdAB5AD0AdAByAHUAZQABB0sA
UwBfAAAPRABpAHIAcABhAHQAaAAAAQCApXMAZQBsAGUAYwB0ACAAQwBPAEwAVQBNAE4AXwBOAEEA
TQBFACwAIABEAEEAVABBAF8AVABZAFAARQAgAGYAcgBvAG0AIABJAE4ARgBPAFIATQBBAFQASQBP
AE4AXwBTAEMASABFAE0AQQAuAGMAbwBsAHUAbQBuAHMAIAB3AGgAZQByAGUAIABUAEEAQgBMAEUA
XwBOAEEATQBFACAAPQAgACcAAQMnAAERRQBuAHQAZQByAGkAbgBnAAARcgBlAGEAZABGAGkAbABl
AAARRgBpAGwAZQBwAGEAdABoAAAjRABlAHMAdABpAG4AYQB0AGkAbwBuACAAdABhAGIAbABlAABd
UAByAG8AdgBpAGQAZQByAD0ATQBpAGMAcgBvAHMAbwBmAHQALgBBAEMARQAuAE8ATABFAEQAQgAu
ADEAMgAuADAAOwBEAGEAdABhACAAUwBvAHUAcgBjAGUAPQAAXzsARQB4AHQAZQBuAGQAZQBkACAA
UAByAG8AcABlAHIAdABpAGUAcwA9ACcARQB4AGMAZQBsACAAOAAuADAAOwBIAEQAUgA9AFkAZQBz
ADsASQBNAEUAWAA9ADEAJwABPXMAZQBsAGUAYwB0ACAAKgAgAGYAcgBvAG0AIABbAFQAaQBsACAA
ZABhAHQAYQBiAGEAcwBlAG4AJABdAAAVQwBvAG4AbgBlAGMAdABpAG8AbgAADW8AcABlAG4AZQBk
AAANUgBlAGEAZABlAHIAABFzAHQAYQByAHQAaQBuAGcAABNFAG4AdAByAHkAIABrAGUAeQAAF0UA
bgB0AHIAeQAgAHYAYQBsAHUAZQAAD3YAYQByAGMAaABhAHIAAA9uAHUAbQBlAHIAaQBjAAAHaQBu
AHQAACNGAGkAbABsAGkAbgBnACAARABhAHQAYQBUAGEAYgBsAGUAABdzAHQAYQByAHQAaQBuAGcA
LgAuAC4AABNlAG4AZABpAG4AZwAuAC4ALgAAB1QAaQBkAAAbRABFAEwARQBUAEUAIABGAFIATwBN
ACAAWwAAH10AIABXAEgARQBSAEUAIABUAGkAZAAgAD0AIAAnAAEbRABlAGwAZQB0AGUAIABzAHQA
cgBpAG4AZwAAD2MAbABvAHMAaQBuAGcAAA1jAGwAbwBzAGUAZAAAA1sAAANdAAAJZABiAG8ALgAA
EUIAdQBsAGsAYwBvAHAAeQAAE0YAYQBpAGwAZQBkACAAYQB0AAA3RgBBAEEAQQBDAEsAIABlAHgA
ZQBwAHQAaQBvAG4AIABzAHUAYwBrAHkAIABiAGEAbABsAHMAAICbSQBzAE4AdQBsAGwAIABwAHIA
bwBwAGUAcgB0AHkAIABjAGEAbgBuAG8AdAAgAGIAZQAgAHMAZQB0ACAAdABvACAARgBhAGwAcwBl
AC4AIABBAHMAcwBpAGcAbgAgAGEAIAB2AGEAbAB1AGUAIAB0AG8AIAB0AGgAZQAgAGMAbwBsAHUA
bQBuACAAaQBuAHMAdABlAGEAZAAuAAARTwB1AHQAcAB1AHQAIAAwAAAVUgBvAG8AdABmAG8AbABk
AGUAcgAAE1QAYQBiAGwAZQBuAGEAbQBlAABxUwBDAF8AOQA3ADQANgA0ADYANABhADMAYwBhADkA
NABkADUAZgA4ADYAMAA0ADIAZAA4ADYAOQA4ADUAYgAxAGQAZAA2AC4AUAByAG8AcABlAHIAdABp
AGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAAAAPJVqPf9paNBgjPPW4/ExIcABCABAQgDIAABBSAB
ARERBCABAQ4GIAEBEYCJBQcCHQ4IBiABHQ4dAwUAAg4ODgoHBh0OHQ4IDg4CBQABHQ4OBSAAEoCl
CiAGAQgODg4IEAIMBwMVEkECDg4SRRI5BhUSQQIODgYAAw4ODg4GIAIBDhI5BCAAEj0EIAEcCAMg
AA4HIAIBEwATAQMgAAIxBxMOEjkODgISSRUSQQIODhJNElEIDhURVQIODhURWQIODg4SXRI5EmEV
EVkCDg4SZQYgAgEOEk0EIAASSQogABURVQITABMBBhURVQIODgogABURWQITABMBBhURWQIODgQg
ABMABCAAEwEFAAICDg4FIAASgLkIAAESgL0RgMEJIAISgMUOEoC9BSABCBJRBCABCA4FIAASgNkG
IAESgN0IBCAAHRwFAAEOHQ4DAAABAyAACAUgAQESOQUgABKA6QcgAhKA7Q4OBSABARJRCSADARJt
HQgScQUgAgEIHAMHAQgGAAIIEnEOBSABHQgIBSAAEoD1BiABEoD5HAUAABKA/QYgARwSgQEFIAAS
gQUHIAIBDhKBBQi3elxWGTTgiQiJhF3NgIDMkQMGEjkDBhI9AgYOAwYSFAMGEhgDBhIMAwYSdQQG
EoCBBAYSgIUDBhIgBCABDg4JIAEVEkECDg4OBSACAQ4OBCABAQILIAQBCB0IHRJtEnEFIAEBEnUF
AAASgIEFAAASgIUGAAEBEoCFBAAAEiADKAAIAygAAgMoAA4FCAASgIEFCAASgIUECAASIAgBAAgA
AAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU0NfOTc0NjQ2
NGEzY2E5NGQ1Zjg2MDQyZDg2OTg1YjFkZDYAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAyMQAA
SQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIu
TkVUIEZyYW1ld29yayA0LjUEAQAAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5S
ZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFs
LCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGlt
ZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAACYRgAAAAAAAAAAAACyRgAAACAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAApEYAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAA
AAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAY
AACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWGAAAOwD
AAAAAAAAAAAAAOwDNAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAAB
AAAAAQAAAAAAAAABAAAAAAA/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIA
RgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsARM
AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAAAoAwAAAQAwADAAMAAwADAANABiADAA
AAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBl
AAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAQwBfADkA
NwA0ADYANAA2ADQAYQAzAGMAYQA5ADQAZAA1AGYAOAA2ADAANAAyAGQAOAA2ADkAOAA1AGIAMQBk
AGQANgAAADAACAABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgAwAC4AMAAAAHAA
KAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBDAF8AOQA3ADQANgA0ADYANABhADMAYwBh
ADkANABkADUAZgA4ADYAMAA0ADIAZAA4ADYAOQA4ADUAYgAxAGQAZAA2AC4AZABsAGwAAABIABIA
AQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIAAg
ADIAMAAyADEAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAAAHgA
KAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAEMAXwA5ADcANAA2ADQANgA0
AGEAMwBjAGEAOQA0AGQANQBmADgANgAwADQAMgBkADgANgA5ADgANQBiADEAZABkADYALgBkAGwA
bAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBDAF8AOQA3ADQANgA0ADYANABh
ADMAYwBhADkANABkADUAZgA4ADYAMAA0ADIAZAA4ADYAOQA4ADUAYgAxAGQAZAA2AAAANAAIAAEA
UAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgAwAC4AMAAAADgACAABAEEAcwBz
AGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAALgAwAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAwAAADENgAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                  name="VSTAProjectName"
                  typeConverter="NOTBROWSABLE">SC_9746464a3ca94d5f86042d86985b1dd6</property>
                <property
                  dataType="System.String"
                  description="Specifies the programming language used by the script."
                  name="ScriptLanguage"
                  typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read-only variables."
                  name="ReadOnlyVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg">$Package::Rootfolder,$Package::Tablename</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read/write variables."
                  name="ReadWriteVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="List of breakpoints present on the script."
                  isArray="true"
                  name="BreakpointCollection"
                  typeConverter="NOTBROWSABLE">
                  <arrayElements
                    arrayElementCount="0" />
                </property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataChecksum140"
                  typeConverter="NOTBROWSABLE">E6</property>
                <property
                  dataType="System.String"
                  name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
              </properties>
              <outputs>
                <output
                  refId="Package\Data Flow Task\Script Component.Outputs[Output 0]"
                  hasSideEffects="true"
                  name="Output 0">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\Script Component.Outputs[Output 0].Columns[derp]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\Script Component.Outputs[Output 0].Columns[derp]"
                      name="derp" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Data Flow Task.Paths[Output 0]"
              endId="Package\Data Flow Task\OLE DB Command.Inputs[OLE DB Command Input]"
              name="Output 0"
              startId="Package\Data Flow Task\Script Component.Outputs[Output 0]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="150.4,41.6"
          Id="Package\Data Flow Task"
          TopLeft="305.142862339409,149.270590328758" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Data Flow Task">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="162.4,41.6"
          Id="Package\Data Flow Task\Script Component"
          TopLeft="294.28571929737,115.623531033341" />
        <NodeLayout
          Size="166.4,41.6"
          Id="Package\Data Flow Task\OLE DB Command"
          TopLeft="290,249" />
        <EdgeLayout
          Id="Package\Data Flow Task.Paths[Output 0]"
          TopLeft="374.342859648685,157.223531033341">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,91.776468966659"
              Start="0,0"
              End="0,84.276468966659">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,84.276468966659" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>