<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="2/17/2021 12:47:12 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="VK-C0D0E-054"
  DTS:CreatorName="I04\vk300"
  DTS:DTSID="{223B8C11-FE7F-435F-AB9B-D372DE1E2062}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.121"
  DTS:LocaleID="1044"
  DTS:ObjectName="Lokale data - Les mappe"
  DTS:PackageType="5"
  DTS:ProtectionLevel="0"
  DTS:VersionBuild="26"
  DTS:VersionGUID="{EE27FBF0-07BD-4235-86B9-FC74C24F4988}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:PackageParameters>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{4856D9D1-8F95-4A90-A469-9831F3339AE0}"
      DTS:ObjectName="Rootfolder"
      DTS:Required="True">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue"
        xml:space="preserve"></DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{36E42007-EDEA-4218-9040-EC2C38A0CE28}"
      DTS:ObjectName="Tablename">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue"
        xml:space="preserve"></DTS:Property>
    </DTS:PackageParameter>
  </DTS:PackageParameters>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Data Flow Task"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{AEA88E5C-5AC2-463A-9C50-61598E3E719E}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Data Flow Task"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1">
          <components>
            <component
              refId="Package\Data Flow Task\OLE DB Command"
              componentClassID="Microsoft.OLEDBCommand"
              contactInfo="OLE DB Command;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;2"
              description="Runs an SQL statement for each row in a data flow. For example, call a 'new employee setup' stored procedure for each row in the 'new employees' table. Note: running an SQL statement for each row of a large data flow may take a long time."
              name="OLE DB Command"
              usesDispositions="true"
              version="2">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  expressionType="Notify"
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">select 1</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Data Flow Task\OLE DB Command.Connections[OleDbConnection]"
                  connectionManagerID="{E03B5EEF-9A98-4EE4-931D-9D4F8E0460CE}:external"
                  connectionManagerRefId="Project.ConnectionManagers[Staging_ASSS]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Data Flow Task\OLE DB Command.Inputs[OLE DB Command Input]"
                  errorOrTruncationOperation="Command Execution"
                  errorRowDisposition="FailComponent"
                  hasSideEffects="true"
                  name="OLE DB Command Input">
                  <externalMetadataColumns
                    isUsed="True" />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Data Flow Task\OLE DB Command.Outputs[OLE DB Command Output]"
                  exclusionGroup="1"
                  name="OLE DB Command Output"
                  synchronousInputId="Package\Data Flow Task\OLE DB Command.Inputs[OLE DB Command Input]">
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Data Flow Task\OLE DB Command.Outputs[OLE DB Command Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="OLE DB Command Error Output"
                  synchronousInputId="Package\Data Flow Task\OLE DB Command.Inputs[OLE DB Command Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Command.Outputs[OLE DB Command Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\OLE DB Command.Outputs[OLE DB Command Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Command.Outputs[OLE DB Command Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\OLE DB Command.Outputs[OLE DB Command Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Data Flow Task\Script Component"
              componentClassID="Microsoft.ManagedComponentHost"
              contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;11"
              description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
              name="Script Component"
              version="11">
              <properties>
                <property
                  dataType="System.String"
                  description="Stores the source code of the component"
                  isArray="true"
                  name="SourceCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="30">
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.IO;
using System.Data.SqlClient;
using System.Configuration;
using System.Linq;
using System.Collections.Generic;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using System.Data.OleDb;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    private SqlConnection scn;
    private SqlDataReader sqlDataReader;
    private string sqlConnectionString;
    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        /*
         * Add your code here
         */
        sqlConnectionString = @"Data Source=vk-sxd0e-003;Initial Catalog=TEST_Staging_ASSS;Integrated Security=true";
        scn = new SqlConnection(sqlConnectionString);
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    public string translatePathToDestinationTable(string folderpath)
    {
        string[] folderSplit = folderpath.Split('\\');
        int maxIndex = folderSplit.Length - 1;

        return "[KS_" + folderSplit[maxIndex].Remove(5) + "]";
    }

    public void readFolder(string folderpath)
    {
        string[] fileEntries = Directory.GetFiles(folderpath);
        string[] subdirectoryEntries = Directory.GetDirectories(folderpath);

        foreach (String filePath in fileEntries)
        {
            this.ComponentMetaData.FireInformation(1, "Filepath", filePath, "", 0, true);

            this.ComponentMetaData.FireInformation(1, "destinationTable", translatePathToDestinationTable(folderpath), "", 0, true);
            readFile(filePath, "");
        }

        foreach (String subdirPath in subdirectoryEntries)
        {
            this.ComponentMetaData.FireInformation(1, "Dirpath", subdirPath, "", 0, true);
            readFolder(subdirPath);
        }
    }

    // Creates a dictionary with column names and their datatypes based on a sql table. 
    /// <summary>
    /// Queries the columns information schema to get the column names and datatypes and stores these in a dictionary
    /// </summary>
    /// <returns> 
    /// A dictionary containing with the column name as key and datatype as value
    /// </returns>
    /// <param name="tableName">A string containing the tablename of the table to query</param>
    public Dictionary<string, string> findDataTypes (string tableName)
    {
        Dictionary<string, string> dataTypes;
        SqlCommand command;
        string sqlQueryString;
        
        dataTypes = new Dictionary<string, string>();

        // Gets the column name and data type from the table in the sql db
        sqlQueryString = "select COLUMN_NAME, DATA_TYPE from INFORMATION_SCHEMA.columns where TABLE_NAME = 'KS_" + tableName + "'";
        command = new SqlCommand(sqlQueryString, scn);

        scn.Open();

        sqlDataReader = command.ExecuteReader();

        while (sqlDataReader.Read())
        {
            // Column name is at index 0, datatype is at index 1
            dataTypes.Add(sqlDataReader.GetValue(0).ToString(), sqlDataReader.GetValue(1).ToString());
        }

        sqlDataReader.Close();
        scn.Close();

        return dataTypes;
    }

    public void readFile(string filepath, string destinationTable)
    {
        this.ComponentMetaData.FireInformation(1, "File", "reading file at " + filepath, "", 0, true);
        string excelConnectionString = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + filepath + ";Extended Properties='Excel 8.0;HDR=Yes;IMEX=1'";
        string queryString = "select * from [Til databasen$]";

        try
        {
            OleDbDataReader reader;
            using (OleDbConnection connection = new OleDbConnection(excelConnectionString))
            {
                OleDbCommand command = new OleDbCommand(queryString, connection);
                //this.ComponentMetaData.FireInformation(1, "Connection", "opening", "", 0, true);
                connection.Open();
                this.ComponentMetaData.FireInformation(1, "Connection", "opened", "", 0, true);

                // Skal denne brukes?
                string sheet1 = connection.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null).Rows[0]["TABLE_NAME"].ToString();
                DataTable dtExcelData = new DataTable();

                this.ComponentMetaData.FireInformation(1, "Reader", "starting", "", 0, true);
                reader = command.ExecuteReader();

                dtExcelData.Columns.AddRange(new DataColumn[6] {
                        new DataColumn("Kommunenummer", typeof(string)),
                        new DataColumn("Variabelnavn", typeof(string)),
                        new DataColumn("aldersgrupper", typeof(string)),
                        new DataColumn("Kilde", typeof(string)),
                        new DataColumn("Årgang", typeof(string)),
                        new DataColumn("Verdi", typeof(decimal))
                        });
                
                int columns = reader.FieldCount;
                this.ComponentMetaData.FireInformation(1, "Number of columns", columns.ToString(), "", 0, true);
                //dt.Columns.Add(new DataColumn(reader.GetName(i), typeof(string)));

                findDataTypes(Variables.Tablename);

                using (OleDbDataAdapter oda = new OleDbDataAdapter(queryString, connection))
                {
                    this.ComponentMetaData.FireInformation(1, "Filling DataTable", "starting...", "", 0, true);
                    oda.Fill(dtExcelData);
                    this.ComponentMetaData.FireInformation(1, "Filling DataTable", "ending...", "", 0, true);
                }
                this.ComponentMetaData.FireInformation(1, "Printing DataTable", dtExcelData.Rows.Count.ToString(), "", 0, true);
                /* while (reader.Read())
                 {
                     int range = reader.FieldCount;
                     if (dt == null)
                     {
                         dt = new DataTable();
                         for (int i = 0; i < range; i++)
                         {
                             //this.ComponentMetaData.FireInformation(1, reader.GetName(i), reader.GetValue(i).ToString(), "", 0, true);
                             this.ComponentMetaData.FireInformation(1, reader.GetName(i), "", "", 0, true);
                             
                         }
                     }

                 }*/

                this.ComponentMetaData.FireInformation(1, "Reader", "closing", "", 0, true);
                reader.Close();
                this.ComponentMetaData.FireInformation(1, "Reader", "closed", "", 0, true);

                this.ComponentMetaData.FireInformation(1, "Connection", "closing", "", 0, true);
                connection.Close();
                this.ComponentMetaData.FireInformation(1, "Connection", "closed", "", 0, true);
                OleDbConnection.ReleaseObjectPool();
                string tableName = "[KS_" + Variables.Tablename + "]";

                // Kan man ikke bruke scn her istedenfor new SqlConnection?
                using (SqlConnection con = new SqlConnection(sqlConnectionString))
                {
                    using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(con))
                    {
                        sqlBulkCopy.DestinationTableName = "dbo." + tableName;
                        sqlBulkCopy.ColumnMappings.Add("Kommunenummer", "Regionkode");
                        sqlBulkCopy.ColumnMappings.Add("Variabelnavn", "Statistikkvariabelnavn");
                        sqlBulkCopy.ColumnMappings.Add("aldersgrupper", "Aldernavn");
                        sqlBulkCopy.ColumnMappings.Add("Kilde", "Kildenavn");
                        sqlBulkCopy.ColumnMappings.Add("Årgang", "Tid");
                        sqlBulkCopy.ColumnMappings.Add("Verdi", "Verdi");
                        con.Open();
                        sqlBulkCopy.WriteToServer(dtExcelData);
                        con.Close();
                    }
                }

            }
        }
        catch (Exception e)
        {
            this.ComponentMetaData.FireInformation(1, "Failed at", filepath, "", 0, true);
            this.ComponentMetaData.FireInformation(1, "FAAACK exeption sucky balls", e.ToString(), "", 0, true);
        }
    }

    public override void CreateNewOutputRows()
    {
        /*
          Add rows by calling the AddRow method on the member variable named "<Output Name>Buffer".
          For example, call MyOutputBuffer.AddRow() if your output was named "MyOutput".
        */


        // Arknavn
        // Til databasen bv

        readFolder(Variables.Rootfolder);

        Output0Buffer.AddRow();
        Output0Buffer.derp = 9000;
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Output0Buffer: ScriptBuffer

{
    public Output0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public Int32 derp
    {
        set
        {
            this[0] = value;
        }
    }
    public bool derp_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public Output0Buffer Output0Buffer;

    public virtual void FinishOutputs()
    {
    }

    private void MarkOutputsFinished()
    {

        if (null != Output0Buffer)
        {
            Output0Buffer.SetEndOfRowset();
            Output0Buffer = null;
        }

    }

    public override void PrimeOutput(int Outputs, int[] OutputIDs, PipelineBuffer[] Buffers, OutputNameMap OutputMap)
    {
       for(int Idx = 0; Idx < Outputs; Idx++)
       {
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Output 0"))
            {
                Output0Buffer = new Output0Buffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
        }

        CreateNewOutputRows();

        FinishOutputs();
        MarkOutputsFinished();

    }

    public virtual void CreateNewOutputRows()
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public String Rootfolder
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["Rootfolder"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String Tablename
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["Tablename"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_9746464a3ca94d5f86042d86985b1dd6.csproj]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{C0745717-CCEF-48F5-8927-82F7EA616589}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_9746464a3ca94d5f86042d86985b1dd6</RootNamespace>
    <AssemblyName>SC_9746464a3ca94d5f86042d86985b1dd6</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Configuration" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_9746464a3ca94d5f86042d86985b1dd6.Properties.Settings.get_Default():SC_9746464a3ca94d5f86042d86985b1dd6.Properties.Sett" +
    "ings")]

namespace SC_9746464a3ca94d5f86042d86985b1dd6.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Project]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>SC_9746464a3ca94d5f86042d86985b1dd6</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>SC_9746464a3ca94d5f86042d86985b1dd6</msb:DisplayName>
    <msb:ProjectId>{5ED6B6FF-7761-43F1-867B-029E6C623812}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="SC_9746464a3ca94d5f86042d86985b1dd6.csproj" />
    <msb:File Include="ComponentWrapper.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="main.cs" />
    <msb:File Include="BufferWrapper.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_9746464a3ca94d5f86042d86985b1dd6")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_9746464a3ca94d5f86042d86985b1dd6")]
[assembly: AssemblyCopyright("Copyright @  2021")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_9746464a3ca94d5f86042d86985b1dd6.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_9746464a3ca94d5f86042d86985b1dd6.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_9746464a3ca94d5f86042d86985b1dd6.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_9746464a3ca94d5f86042d86985b1dd6.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_9746464a3ca94d5f86042d86985b1dd6.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Stores the binary representation of the component"
                  isArray="true"
                  name="BinaryCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="2">
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_9746464a3ca94d5f86042d86985b1dd6.dll]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[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
vAmGAAsAJycAAAAAhhgACAYACwBHJwAAAADGAYAJBgALAEknAAAAAIEACgEGAAsAaCcAAAAAxgB1
CrcBCwBHJwAAAADGAZcJBgAPAL0nAAAAAIYYAAjDAQ8AzCcAAAAAhhgACMMBEADbJwAAAACGCEMH
egARAAEoAAAAAIYICgJ6ABEAJygAAAAAgxgACAYAEQAvKAAAAACTCHwHyQERAFsoAAAAAJMIPgLO
AREAYigAAAAAkwhKAtMBEQBqKAAAAACWCM4J2QESAHEoAAAAAIYYAAgGABIAeSgAAAAAkRgGCP0A
EgAAAAEA4AQAAAEA4AQAAAEAAAIAAAEA1wQAAAIAnQEAAAEAdQcAAAIAHwkAAAMAnwYAAAEAegQA
AAEAegQAAAEAhgkAAAIADQgAAAMAeAkAAAQAnwYAAAEAFAoAAAEAFAoAAAEAegQJAAAIAQARAAAI
BgAZAAAICgApAAAIEAAxAAAIEAA5AAAIEABBAAAIEABJAAAIEABRAAAIEABZAAAIEABhAAAIEABp
AAAIBgDpAAAIBgAJAQAIFQAZAQAIBgDZAFoEBgBxAAAIEADZAGUEBgApAcgJIgApAYAEKQApAasJ
LgAxAQgJQAAxAa0IQADZALUARgA5AaQFTAAMAAAIBgCJAAAIaQBBAYkFBgCJACoHcABJAXEEdQDh
AM4EegAMAAYBfgBJAQEBhgBJAZkCBgBBAZkCBgApAasJoQCZAAAIEABRAQAIpwBZAesIrgCZAF8B
swChAI4JvQBpAWAFwwBxAWAFygChAAAIBgBRASoHzwChAGAJ1ACJAcwB2gCBAQAI4wB5AVYB6wBJ
ASgK8wChAc4EegCpAAAIpwCpATEF9wCxAZ8CBgC5AR4K8wCZAE4F/QCxAAAIAQGxAOcBEACxAEQJ
BwHBAQYBDQGxAPIHFQHBAAAIGwHBAGkFJQHBAEYFAQDRAQAIEADBAM0KBgDBALkJBgDBALwJhgDZ
AAAIBgDZAJMALwHZADMJNgHhAAAIBgDZAPIIPAHZAWAFQgHZALAKSQHhAYEKTwGJAdQKVgHxAAAI
XAERAQAIBgAuAAsA+QEuABMAAgIuABsAIQIuACMAKgIuACsAUwIuADMAUwIuADsAUwIuAEMAKgIu
AEsAWQIuAFMAUwIuAFsAcAJDAGMAugKpAHMAIQLJAHMAIQLjAGsAugJhAXsAugIcADUAVwCKACsB
AwABAAYAAwAHAAUACAAHAAAA9AbeAQAAOgXiAQAARwfmAQAADgLmAQAAgAfqAQAAXgLvAQAA0gn0
AQEACgADAAEACwAFAAIAFgAHAAIAFwAJAAIAGQALAAIAGgANAAEAGwANAAIAHAAPAGIABIAAAAEA
AAAAAAAAAAAAAAAAZgAAAAQAAAAAAAAAAAAAAGQB3QAAAAAADgAAAAAAAAAAAAAAbQE3CgAAAAAE
AAAAAAAAAAAAAABkAakAAAAAAA4AAAAAAAAAAAAAAG0BVAoAAAAABAAAAAAAAAAAAAAAZAFyBQAA
AAAOAAAAAAAAAAAAAABtAcwGAAAAAA4AAAAAAAAAAAAAAG0BqQYAAAAAAAAAAAEAAABbCAAAAAAA
SURUU0NvbXBvbmVudE1ldGFEYXRhMTAwAElEVFNWYXJpYWJsZTEwMABJRFRTVmFyaWFibGVzMTAw
AElEVFNFdmFsdWF0b3JDb250ZXh0MTAwAEludDMyAERpY3Rpb25hcnlgMgBTQ185NzQ2NDY0YTNj
YTk0ZDVmODYwNDJkODY5ODViMWRkNgA8TW9kdWxlPgBHZXRPdXRwdXRJRABTeXN0ZW0uSU8AU3lz
dGVtLkRhdGEAZ2V0X0NvbXBvbmVudE1ldGFEYXRhAFN5c3RlbS5EYXRhLk9sZURiAG1zY29ybGli
AFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljAFJlYWQAQWRkAE1hcmtPdXRwdXRzRmluaXNoZWQA
T2xlRGJTY2hlbWFHdWlkAE9sZURiQ29tbWFuZABTcWxDb21tYW5kAGRlZmF1bHRJbnN0YW5jZQBB
ZGRSYW5nZQBHZXRPbGVEYlNjaGVtYVRhYmxlAERhdGFUYWJsZQB0cmFuc2xhdGVQYXRoVG9EZXN0
aW5hdGlvblRhYmxlAGRlc3RpbmF0aW9uVGFibGUASURpc3Bvc2FibGUAUnVudGltZVR5cGVIYW5k
bGUAR2V0VHlwZUZyb21IYW5kbGUAcmVhZEZpbGUAc2V0X0Rlc3RpbmF0aW9uVGFibGVOYW1lAHRh
YmxlTmFtZQBnZXRfVGFibGVuYW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlBpcGVsaW5lAFR5
cGUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAEludGVybmFsRGF0YUNv
bGxlY3Rpb25CYXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAENsb3NlAERpc3Bvc2UARWRpdG9y
QnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2Vy
Q29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0
ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdl
dEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1i
bHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFz
c2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2Ny
aXB0Q29tcG9uZW50RW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUA
UnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAUHJlRXhlY3V0ZQBQb3N0RXhlY3V0ZQBHZXRW
YWx1ZQB2YWx1ZQBSZW1vdmUAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBTcWxCdWxrQ29weUNv
bHVtbk1hcHBpbmcAc3FsQ29ubmVjdGlvblN0cmluZwBUb1N0cmluZwBmaWxlcGF0aABmb2xkZXJw
YXRoAERlY2ltYWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNDXzk3NDY0NjRhM2NhOTRkNWY4NjA0
MmQ4Njk4NWIxZGQ2LmRsbABGaWxsAHNldF9kZXJwX0lzTnVsbABTZXROdWxsAFJlbGVhc2VPYmpl
Y3RQb29sAGdldF9JdGVtAHNldF9JdGVtAFN5c3RlbQByZXNvdXJjZU1hbgBzY24AT3BlbgBTY3Jp
cHRNYWluAERhdGFDb2x1bW4ARmlyZUluZm9ybWF0aW9uAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5
c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAFNxbEJ1bGtDb3B5Q29sdW1uTWFw
cGluZ0NvbGxlY3Rpb24ARGF0YUNvbHVtbkNvbGxlY3Rpb24ARGF0YVJvd0NvbGxlY3Rpb24AT2xl
RGJDb25uZWN0aW9uAFNxbENvbm5lY3Rpb24ASW52YWxpZE9wZXJhdGlvbkV4Y2VwdGlvbgBTeXN0
ZW0uRGF0YS5Db21tb24AQ3VsdHVyZUluZm8AT3V0cHV0TmFtZU1hcABPdXRwdXRNYXAATWljcm9z
b2Z0LlNxbFNlcnZlci5EVFNSdW50aW1lV3JhcABNaWNyb3NvZnQuU3FsU2VydmVyLkRUU1BpcGVs
aW5lV3JhcABzZXRfZGVycABDaGFyAE9sZURiRGF0YVJlYWRlcgBTcWxEYXRhUmVhZGVyAHNxbERh
dGFSZWFkZXIARXhlY3V0ZVJlYWRlcgByZWFkRm9sZGVyAGdldF9Sb290Zm9sZGVyAE91dHB1dDBC
dWZmZXIAUGlwZWxpbmVCdWZmZXIAU2NyaXB0QnVmZmVyAGdldF9SZXNvdXJjZU1hbmFnZXIATWlj
cm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZS5XcmFwcGVyAE1pY3Jvc29mdC5TcWxTZXJ2ZXIu
RHRzLlBpcGVsaW5lLldyYXBwZXIAT2xlRGJEYXRhQWRhcHRlcgBXcml0ZVRvU2VydmVyAC5jdG9y
AC5jY3RvcgBPdXRwdXRJRHMAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5SdW50aW1lLkNvbXBp
bGVyU2VydmljZXMAU3lzdGVtLlJlc291cmNlcwBTQ185NzQ2NDY0YTNjYTk0ZDVmODYwNDJkODY5
ODViMWRkNi5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAR2V0
RGlyZWN0b3JpZXMAU0NfOTc0NjQ2NGEzY2E5NGQ1Zjg2MDQyZDg2OTg1YjFkZDYuUHJvcGVydGll
cwBUYWJsZXMAZ2V0X1JlYWRPbmx5VmFyaWFibGVzAEdldEZpbGVzAGZpbmREYXRhVHlwZXMAQnVm
ZmVyQ29sdW1uSW5kZXhlcwBHZXRDb2x1bW5JbmRleGVzAGdldF9Db2x1bW5NYXBwaW5ncwBTZXR0
aW5ncwBnZXRfQ29sdW1ucwBDb25uZWN0aW9ucwBCdWZmZXJzAEZpbmlzaE91dHB1dHMAZ2V0X1Jv
d3MAQ3JlYXRlTmV3T3V0cHV0Um93cwBDb25jYXQAT2JqZWN0AFNldEVuZE9mUm93c2V0AFNwbGl0
AGdldF9EZWZhdWx0AFN5c3RlbS5EYXRhLlNxbENsaWVudABVc2VyQ29tcG9uZW50AFBhcmVudENv
bXBvbmVudABTY3JpcHRDb21wb25lbnQAZ2V0X0NvdW50AGdldF9GaWVsZENvdW50AE1pY3Jvc29m
dC5TcWxTZXJ2ZXIuVHhTY3JpcHQATWljcm9zb2Z0LlNxbFNlcnZlci5QaXBlbGluZUhvc3QAUHJp
bWVPdXRwdXQAR2V0VmFsdWVXaXRoQ29udGV4dABTY3JpcHRDb21wb25lbnRFdmFsQ29udGV4dABn
ZXRfRXZhbHVhdG9yQ29udGV4dABEYXRhUm93AEFkZFJvdwBnZXRfQXNzZW1ibHkAU3FsQnVsa0Nv
cHkARGlyZWN0b3J5AAAAgKdEAGEAdABhACAAUwBvAHUAcgBjAGUAPQB2AGsALQBzAHgAZAAwAGUA
LQAwADAAMwA7AEkAbgBpAHQAaQBhAGwAIABDAGEAdABhAGwAbwBnAD0AVABFAFMAVABfAFMAdABh
AGcAaQBuAGcAXwBBAFMAUwBTADsASQBuAHQAZQBnAHIAYQB0AGUAZAAgAFMAZQBjAHUAcgBpAHQA
eQA9AHQAcgB1AGUAAQlbAEsAUwBfAAADXQAAEUYAaQBsAGUAcABhAHQAaAAAAQAhZABlAHMAdABp
AG4AYQB0AGkAbwBuAFQAYQBiAGwAZQAAD0QAaQByAHAAYQB0AGgAAICrcwBlAGwAZQBjAHQAIABD
AE8ATABVAE0ATgBfAE4AQQBNAEUALAAgAEQAQQBUAEEAXwBUAFkAUABFACAAZgByAG8AbQAgAEkA
TgBGAE8AUgBNAEEAVABJAE8ATgBfAFMAQwBIAEUATQBBAC4AYwBvAGwAdQBtAG4AcwAgAHcAaABl
AHIAZQAgAFQAQQBCAEwARQBfAE4AQQBNAEUAIAA9ACAAJwBLAFMAXwABAycAAQlGAGkAbABlAAAh
cgBlAGEAZABpAG4AZwAgAGYAaQBsAGUAIABhAHQAIAAAXVAAcgBvAHYAaQBkAGUAcgA9AE0AaQBj
AHIAbwBzAG8AZgB0AC4AQQBDAEUALgBPAEwARQBEAEIALgAxADIALgAwADsARABhAHQAYQAgAFMA
bwB1AHIAYwBlAD0AAF87AEUAeAB0AGUAbgBkAGUAZAAgAFAAcgBvAHAAZQByAHQAaQBlAHMAPQAn
AEUAeABjAGUAbAAgADgALgAwADsASABEAFIAPQBZAGUAcwA7AEkATQBFAFgAPQAxACcAAT1zAGUA
bABlAGMAdAAgACoAIABmAHIAbwBtACAAWwBUAGkAbAAgAGQAYQB0AGEAYgBhAHMAZQBuACQAXQAA
FUMAbwBuAG4AZQBjAHQAaQBvAG4AAA1vAHAAZQBuAGUAZAAAFVQAQQBCAEwARQBfAE4AQQBNAEUA
AA1SAGUAYQBkAGUAcgAAEXMAdABhAHIAdABpAG4AZwAAG0sAbwBtAG0AdQBuAGUAbgB1AG0AbQBl
AHIAABlWAGEAcgBpAGEAYgBlAGwAbgBhAHYAbgAAG2EAbABkAGUAcgBzAGcAcgB1AHAAcABlAHIA
AAtLAGkAbABkAGUAAA3FAHIAZwBhAG4AZwABC1YAZQByAGQAaQAAI04AdQBtAGIAZQByACAAbwBm
ACAAYwBvAGwAdQBtAG4AcwAAI0YAaQBsAGwAaQBuAGcAIABEAGEAdABhAFQAYQBiAGwAZQAAF3MA
dABhAHIAdABpAG4AZwAuAC4ALgAAE2UAbgBkAGkAbgBnAC4ALgAuAAAlUAByAGkAbgB0AGkAbgBn
ACAARABhAHQAYQBUAGEAYgBsAGUAAA9jAGwAbwBzAGkAbgBnAAANYwBsAG8AcwBlAGQAAAlkAGIA
bwAuAAAVUgBlAGcAaQBvAG4AawBvAGQAZQAALVMAdABhAHQAaQBzAHQAaQBrAGsAdgBhAHIAaQBh
AGIAZQBsAG4AYQB2AG4AABNBAGwAZABlAHIAbgBhAHYAbgAAE0sAaQBsAGQAZQBuAGEAdgBuAAAH
VABpAGQAABNGAGEAaQBsAGUAZAAgAGEAdAAAN0YAQQBBAEEAQwBLACAAZQB4AGUAcAB0AGkAbwBu
ACAAcwB1AGMAawB5ACAAYgBhAGwAbABzAACAm0kAcwBOAHUAbABsACAAcAByAG8AcABlAHIAdAB5
ACAAYwBhAG4AbgBvAHQAIABiAGUAIABzAGUAdAAgAHQAbwAgAEYAYQBsAHMAZQAuACAAQQBzAHMA
aQBnAG4AIABhACAAdgBhAGwAdQBlACAAdABvACAAdABoAGUAIABjAG8AbAB1AG0AbgAgAGkAbgBz
AHQAZQBhAGQALgAAEU8AdQB0AHAAdQB0ACAAMAAAFVIAbwBvAHQAZgBvAGwAZABlAHIAABNUAGEA
YgBsAGUAbgBhAG0AZQAAcVMAQwBfADkANwA0ADYANAA2ADQAYQAzAGMAYQA5ADQAZAA1AGYAOAA2
ADAANAAyAGQAOAA2ADkAOAA1AGIAMQBkAGQANgAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUA
cwBvAHUAcgBjAGUAcwAAAABBqIUUBWTcRINyNo7+uYEaAAQgAQEIAyAAAQUgAQEREQQgAQEOBiAB
ARGAgQUHAh0OCAYgAR0OHQMEIAEOCAYAAw4ODg4KBwYdDh0OCA4CDgUAAR0ODgUgABKAnQogBgEI
Dg4OCBACCgcCFRJBAg4OEkUGFRJBAg4OBiACAQ4SOQQgABI9BCABHAgDIAAOByACARMAEwEDIAAC
FgcNDg4CEkkSTRJRCA4SVQgSORJZEl0FAAIODg4GIAIBDhJNBAYRgLEJIAISURGAsR0cBSAAEoC1
BiABEoC5CAQgARwOBCAAEkkFIAASgL0IAAESgMURgMkHIAIBDhKAxQcgAQEdEoDBAyAACAUgAQgS
UQMAAAEFIAEBEjkFIAASgOEHIAISgOUODgUgAQESUQkgAwESZR0IEmkFIAIBCBwDBwEIBgACCBJp
DgUgAR0ICAUgABKA7QYgARKA8RwFAAASgPUGIAEcEoD5BSAAEoD9ByACAQ4SgP0It3pcVhk04IkI
iYRdzYCAzJEDBhI5AwYSPQIGDgMGEhQDBhIYAwYSDAMGEm0DBhJ5AwYSfQMGEiAEIAEODgkgARUS
QQIODg4FIAIBDg4EIAEBAgsgBAEIHQgdEmUSaQUgAQESbQQAABJ5BAAAEn0FAAEBEn0EAAASIAMo
AAgDKAACAygADgQIABJ5BAgAEn0ECAASIAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlv
blRocm93cwEIAQACAAAAAAAoAQAjU0NfOTc0NjQ2NGEzY2E5NGQ1Zjg2MDQyZDg2OTg1YjFkZDYA
AAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAyMQAASQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12
NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjUEAQAAAAC0AAAA
zsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBW
ZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYx
OTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBB
RFBBRFC0AAAADEYAAAAAAAAAAAAAJkYAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAABhGAAAAAAAA
AAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAY
AACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWGAAAOwD
AAAAAAAAAAAAAOwDNAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAAB
AAAAAQAAAAAAAAABAAAAAAA/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIA
RgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsARM
AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAAAoAwAAAQAwADAAMAAwADAANABiADAA
AAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBl
AAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAQwBfADkA
NwA0ADYANAA2ADQAYQAzAGMAYQA5ADQAZAA1AGYAOAA2ADAANAAyAGQAOAA2ADkAOAA1AGIAMQBk
AGQANgAAADAACAABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgAwAC4AMAAAAHAA
KAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBDAF8AOQA3ADQANgA0ADYANABhADMAYwBh
ADkANABkADUAZgA4ADYAMAA0ADIAZAA4ADYAOQA4ADUAYgAxAGQAZAA2AC4AZABsAGwAAABIABIA
AQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIAAg
ADIAMAAyADEAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAAAHgA
KAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAEMAXwA5ADcANAA2ADQANgA0
AGEAMwBjAGEAOQA0AGQANQBmADgANgAwADQAMgBkADgANgA5ADgANQBiADEAZABkADYALgBkAGwA
bAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBDAF8AOQA3ADQANgA0ADYANABh
ADMAYwBhADkANABkADUAZgA4ADYAMAA0ADIAZAA4ADYAOQA4ADUAYgAxAGQAZAA2AAAANAAIAAEA
UAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgAwAC4AMAAAADgACAABAEEAcwBz
AGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAALgAwAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAwAAAA4NgAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                  name="VSTAProjectName"
                  typeConverter="NOTBROWSABLE">SC_9746464a3ca94d5f86042d86985b1dd6</property>
                <property
                  dataType="System.String"
                  description="Specifies the programming language used by the script."
                  name="ScriptLanguage"
                  typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read-only variables."
                  name="ReadOnlyVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg">$Package::Rootfolder,$Package::Tablename</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read/write variables."
                  name="ReadWriteVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="List of breakpoints present on the script."
                  isArray="true"
                  name="BreakpointCollection"
                  typeConverter="NOTBROWSABLE">
                  <arrayElements
                    arrayElementCount="0" />
                </property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataChecksum140"
                  typeConverter="NOTBROWSABLE">E6</property>
                <property
                  dataType="System.String"
                  name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
              </properties>
              <outputs>
                <output
                  refId="Package\Data Flow Task\Script Component.Outputs[Output 0]"
                  hasSideEffects="true"
                  name="Output 0">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\Script Component.Outputs[Output 0].Columns[derp]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\Script Component.Outputs[Output 0].Columns[derp]"
                      name="derp" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Data Flow Task.Paths[Output 0]"
              endId="Package\Data Flow Task\OLE DB Command.Inputs[OLE DB Command Input]"
              name="Output 0"
              startId="Package\Data Flow Task\Script Component.Outputs[Output 0]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="150.4,41.6"
          Id="Package\Data Flow Task"
          TopLeft="305.142862339409,149.270590328758" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Data Flow Task">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="161.6,41.6"
          Id="Package\Data Flow Task\Script Component"
          TopLeft="293.71429071621,112.56470746103" />
        <NodeLayout
          Size="166.4,41.6"
          Id="Package\Data Flow Task\OLE DB Command"
          TopLeft="290,249" />
        <EdgeLayout
          Id="Package\Data Flow Task.Paths[Output 0]"
          TopLeft="373.857145358105,154.56470746103">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,94.43529253897"
              Start="0,0"
              End="0,86.93529253897">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,86.93529253897" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>