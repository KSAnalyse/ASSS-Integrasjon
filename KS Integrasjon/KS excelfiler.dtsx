<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="8/30/2023 12:15:47 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="VK-C0D1E-046"
  DTS:CreatorName="I04\vk300"
  DTS:DTSID="{CAC5197C-BF18-4DAA-99AF-8B2DDFE88003}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.170"
  DTS:LocaleID="1044"
  DTS:ObjectName="KS excelfiler"
  DTS:PackageType="5"
  DTS:ProtectionLevel="0"
  DTS:VersionBuild="136"
  DTS:VersionGUID="{5E0C0EAB-0BC7-4CFB-8074-2A99E1F942BA}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{DCED46C2-1D1C-4CE8-BF2B-89AE64D02F5C}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="debug">
      <DTS:VariableValue
        DTS:DataType="11">-1</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{1A6EB4A6-ECEA-4630-9D56-1383DCD5F5D3}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Rootpath">
      <DTS:VariableValue
        DTS:DataType="8">E:\Utvekslingsfiler\ASSS\Manuelt innsamlede tall</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Sequence Container"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{A26B8DB8-7AB4-4C90-B381-822B490B5717}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Sequence Container">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Sequence Container\Les inn excelfiler"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{FCEF1094-5E1B-46AA-B21A-4007C54A11D8}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Les inn excelfiler"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_69e4296eead54e8089391a8ac91c790e"
              VSTAMajorVersion="15"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::debug,User::Rootpath">
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.IO;
using System.Data;
using System.Data.SqlClient;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Data.OleDb;
using System.Text.RegularExpressions;
#endregion

namespace ST_69e4296eead54e8089391a8ac91c790e
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
			string methodName;
			bool printDebugMessage, result;

			methodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
			printDebugMessage = Dts.Variables["debug"].Value.ToString().Equals("True");

			printToOutput(methodName, "Starting", printDebugMessage);

			// if nothing fails, true
			result = readDirectories(Dts.Variables["Rootpath"].Value.ToString(), printDebugMessage);

			printToOutput(methodName, "Done reading with message: " + result, printDebugMessage);

			if (result)
			{
				Dts.TaskResult = (int)ScriptResults.Success;
			} else
			{
				Dts.TaskResult = (int)ScriptResults.Failure;
			}

			
		}

		/// <summary>
		/// Goes through all subdirectories in root. Calls insertDataToSql for each .xlsx file in the directory.
		/// Returns false if an exception occurs, else true.
		/// </summary>
		public bool readDirectories(string path, bool debug)
		{
			bool first = true, result;
			string methodName, tableCode;
			string[] dirs, files;
			DataTable excelTable;

			methodName = System.Reflection.MethodBase.GetCurrentMethod().Name;

			try
			{
				printToOutput(methodName, "Reading directory with path: " + path, debug);

				// only want .xlsx files
				files = Directory.GetFiles(path, "*.xlsx");
				
				// loop through the files in the directory
				foreach (string filepath in files)
				{
					printToOutput(methodName, "File found: " + filepath, debug);

					// the table code in the database should be in the beginning of the directory name
					tableCode = getTableCode(path, debug);

					// go to next file if the filename isn't in the right format right
					if (tableCode.Equals("00000"))
						continue;

					excelTable = readExcelFile(filepath, true);

					// break the loop if there's an error
					if (excelTable == null)
						throw new NullReferenceException("Excelfile with path " + filepath + " doesn't follow the standard.");
					

					insertDataToSql(tableCode, excelTable, filepath, first, debug);

					first = false;
				}

				dirs = Directory.GetDirectories(path, "*");

				// loop through the subdirectories
				foreach (string dirpath in dirs)
				{
					printToOutput(methodName, "Directory found: " + dirpath, debug);
					result = readDirectories(dirpath, true);

					// break the loop if there's an error
					if (!result)
						return result;
				}

				printToOutput(methodName, "Finished reading: " + path, debug);
				return true;

			} catch (Exception e)
			{
				printError(methodName, "Exception: " + e.Message);
				return false;
			}
		}

		public string getTableCode(string directoryPath, bool debug)
		{
			Regex regex;
			string methodName, tableName, tableCode;

			// three letters followed by two numbers
			regex = new Regex(@"[a-zA-Z][a-zA-Z][a-zA-Z][0-9][0-9]");

			methodName = methodName = System.Reflection.MethodBase.GetCurrentMethod().Name;

			// get the tablename by removing the path of the parentfolder + '\'
			tableName = directoryPath.Replace(Directory.GetParent(directoryPath).ToString() + "\\", "");

			// get the tablecode by just getting everything before the first white space
			tableCode = tableName.Split(' ')[0];

			printToOutput(methodName, "tableCode: " + tableCode, debug);

			if (regex.Match(tableCode).Success)
			{
				return tableCode;
			} else
			{
				return "00000";
			}
			
		}

		public DataTable readExcelFile(string path, bool debug)
		{
			string connectionString, methodName, provider, properties;
			OleDbConnection excelConnection;
			OleDbCommand sqlQuery;
			DataTable excelTables;

			methodName = methodName = System.Reflection.MethodBase.GetCurrentMethod().Name;

			try
			{
				printToOutput(methodName, "Reading excel file with path: " + path, debug);

				provider = "Microsoft.ACE.OLEDB.12.0";
				properties = "Excel 12.0";

				connectionString = $"Provider={provider};Data Source={path};Extended Properties={properties}";

				if (File.Exists(path))
				{
					excelConnection = new OleDbConnection(connectionString);
					excelConnection.Open();

					printToOutput(methodName, "Opening excel connection", debug);

					excelTables = excelConnection.GetSchema("Tables");

					
					foreach (DataRow excelTable in excelTables.Rows)
					{
						// find the correct sheet
						if (excelTable["TABLE_NAME"].ToString() == "db$")
						{
							sqlQuery = new OleDbCommand("select * from [db$]", excelConnection);
							using (OleDbDataAdapter da = new OleDbDataAdapter(sqlQuery))
							{
								DataSet dataset = new DataSet();
								da.Fill(dataset);

								printToOutput(methodName, "Closing excel connection in foreach", debug);
								excelConnection.Close();
								return dataset.Tables[0];
							}

						} else
						{
							printError(methodName, "No sheet with the name 'db' in " + path);
						}
					}

					printToOutput(methodName, "Closing excel connection", debug);
					excelConnection.Close();
				}

				return null;
			}
			catch (Exception e)
			{
				printError(methodName, "Exception: " + e.Message);
				return null;
			}

		}

		public bool insertDataToSql(string tableCode, DataTable excelData, String filepath, bool first, bool debug)
		{
			string destinationTable, methodName, sqlConnectionString, sqlTruncateString;
			SqlCommand truncate;

			destinationTable = "dbo.KS_" + tableCode;
			methodName = methodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
			sqlConnectionString = "Server=vk-sxd0e-002;Database=Staging_ASSS;Integrated Security=true;";
			sqlTruncateString = "truncate table " + destinationTable;

			using (SqlConnection connection = new SqlConnection(sqlConnectionString))
			{
				printToOutput(methodName, "Opening connection", debug);
				connection.Open();

				using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connection))
				{
					try
					{
						if (excelData == null)
						{
							connection.Close();
							throw new NullReferenceException("Datatable is null.");
						}

						if (first)
						{
							printToOutput(methodName, "Truncating table: " + destinationTable, debug);
							truncate = new SqlCommand(sqlTruncateString, connection);
							truncate.ExecuteNonQuery();
						}

						printToOutput(methodName, "BulkCopy to table: " + destinationTable, debug);
						bulkCopy.DestinationTableName = destinationTable;

						bulkCopy.WriteToServer(excelData);
					}
					catch (Exception e)
					{
						connection.Close();
						printError(methodName, "Exception: " + e.Message + " when inserting data from file " + filepath);
						return false;
					}

				}

				printToOutput(methodName, "Closing connection", debug);
				connection.Close();
				return true;
			} 
		}

		public void printToOutput(string functionName, string message, bool debug)
		{
			if (debug)
				Dts.Events.FireInformation(1, functionName, message, "", 0, ref debug);
		}

		public void printError(string functionName, string message)
		{
			Dts.Events.FireError(0, functionName, message, String.Empty, 0);
		}


		#region ScriptResults declaration
		/// <summary>
		/// This enum provides a convenient shorthand within the scope of this class for setting the
		/// result of the script.
		/// 
		/// This code was generated automatically.
		/// </summary>
		enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="ST_69e4296eead54e8089391a8ac91c790e.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{94841FCE-99B3-4667-B436-55E2AD7FEE8D}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_69e4296eead54e8089391a8ac91c790e</RootNamespace>
    <AssemblyName>ST_69e4296eead54e8089391a8ac91c790e</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Microsoft.SharePoint.Client, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c, processorArchitecture=MSIL" />
    <Reference Include="Microsoft.SharePoint.Client.Runtime, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c, processorArchitecture=MSIL" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_69e4296eead54e8089391a8ac91c790e</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_69e4296eead54e8089391a8ac91c790e</msb:DisplayName>
    <msb:ProjectId>{AC3A09CD-1BEF-4088-B923-27F02CF315E1}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_69e4296eead54e8089391a8ac91c790e.csproj" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_69e4296eead54e8089391a8ac91c790e.Properties.Settings.get_Default():ST_69e4296eead54e8089391a8ac91c790e.Properties.Sett" +
    "ings")]

namespace ST_69e4296eead54e8089391a8ac91c790e.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_69e4296eead54e8089391a8ac91c790e")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_69e4296eead54e8089391a8ac91c790e")]
[assembly: AssemblyCopyright("Copyright @  2023")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_69e4296eead54e8089391a8ac91c790e.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_69e4296eead54e8089391a8ac91c790e.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_69e4296eead54e8089391a8ac91c790e.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_69e4296eead54e8089391a8ac91c790e.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_69e4296eead54e8089391a8ac91c790e.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_69e4296eead54e8089391a8ac91c790e.dll">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
KwZmBAYApgH9BAYAJQH9BAYAsQhnBQAAAAABAAAAAAABAAEAAQAQACIFnwA5AAEAAQAAABAA1AZP
B20AAQAJAAABEACgB08HgQADAA0AAwEAAPYHAABlAAQAEAARAAkFagERAMsBbgERAMsAcgEGBjMA
dgFWgOYHeQFWgKsBeQFQIAAAAACGACgFBgABAPwgAAAAAIYAMAd9AQEASCIAAAAAhgDbAIMBAwDI
IgAAAACGAEkBiQEFAKwkAAAAAIYA5ASQAQcA6CUAAAAAhgCICJoBDAAIJgAAAACGAGgGoQEPACQm
AAAAAIYYjQYGABEALCYAAAAAgxiNBgYAEQA0JgAAAACTCBcGpwERAGAmAAAAAJMIswGsAREAZyYA
AAAAkwi/AbEBEQBvJgAAAACWCDsItwESAHYmAAAAAIYYjQYGABIAfiYAAAAAkRiTBrwBEgAAAAEA
QgQAAAIAJAQAAAEAMAQAAAIAJAQAAAEAQgQAAAIAJAQAAAEA6AAAAAIAUQAAAAMAPgQAAAQAgggA
AAUAJAQAAAEAeQEAAAIA/gAAAAMAJAQAAAEAeQEAAAIA/gAAAAEA+wMJAI0GAQARAI0GBgAZAI0G
CgApAI0GEAAxAI0GEAA5AI0GEABBAI0GEABJAI0GEABRAI0GEABZAI0GEABhAI0GEABpAI0GBgDR
AI0GBgD5AI0GFQAJAY0GBgARAY4AIQAZAVcBJwBxAO4HKwAhAYkHMQApAfQENwAxAfEDPgDZABsE
JwA5AakHQgBBARsEJwA5AR8IRwAhAUcIAQBJAZcHXgA5AR8IZQBRAY0GEABJAUAHXgCBAPIAJwCJ
AI0GEABJAWwIcwA5AcMAegA5ATUIgACJACoEhwBxAeIHjgA5AR8IpwB5AQ8IrQCRAI0GEACBAR0F
BgCBATsAsgB5ABYIuACRAX8GvgCZAHYIPgCZAfQEwwA5AeAIyAChAY0GzgChAI0G1QCpAI0GBgCp
Ad8E3ACBATUCBgCpAH4H4gCxAfQE6ACxADsCBgCZAJYIjgC5AI0GEADBAI0G+wC5AY0GAQHBAcYI
CAHBAGABEADBAFAGDAE5AR8IEgEhAQQIGgHJAS0FIAE5AewIKwHJAV4GLgFxAI0GBgDZAI0GBgDR
ATcBNwHRAa0IQAHhAI0GRgEBAY0GBgAIABQAYAEIABgAZQEpAHMA9wEuAAsAzwEuABMA2AEuABsA
9wEuACMAAAIuACsAKQIuADMAKQIuADsAKQIuAEMAAAIuAEsALwIuAFMAKQIuAFsARgJDAGMAZQFJ
AHMA9wFhAHsAZQFjAGsAZQEbAE0AbACSAO4AAwABAAQAAwAAABsGwAEAANMBxQEAAD8IygECAAoA
AwACAAsABQABAAwABQACAA0ABwAEgAAAAQAAAOYh8HwAAAAAAACfAAAABAAAAAAAAAAAAAAATgFt
AAAAAAAOAAAAAAAAAAAAAABXAUcEAAAAAAQAAAAAAAAAAAAAAE4BRQAAAAAABAAAAAAAAAAAAAAA
TgH9BAAAAAAOAAAAAAAAAAAAAABXARQAAAAAAAAAAAABAAAA3gYAAAUAAgAAAAAAADxNb2R1bGU+
AFN5c3RlbS5JTwBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMAdmFsdWVfXwBHZXRTY2hl
bWEAU3lzdGVtLkRhdGEAZXhjZWxEYXRhAFN5c3RlbS5EYXRhLk9sZURiAG1zY29ybGliAE9sZURi
Q29tbWFuZABTcWxDb21tYW5kAEdldEN1cnJlbnRNZXRob2QAU1RfNjllNDI5NmVlYWQ1NGU4MDg5
MzkxYThhYzkxYzc5MGUAUmVwbGFjZQBkZWZhdWx0SW5zdGFuY2UAZ2V0VGFibGVDb2RlAHRhYmxl
Q29kZQBnZXRfTWVzc2FnZQBtZXNzYWdlAERhdGFUYWJsZQBWYXJpYWJsZQBJRGlzcG9zYWJsZQBS
dW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQByZWFkRXhjZWxGaWxlAGdldF9OYW1l
AHNldF9EZXN0aW5hdGlvblRhYmxlTmFtZQBmdW5jdGlvbk5hbWUATWljcm9zb2Z0LlNxbFNlcnZl
ci5EdHMuUnVudGltZQBUeXBlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3Vy
Y2VDdWx0dXJlAE1ldGhvZEJhc2UAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEludGVybmFs
RGF0YUNvbGxlY3Rpb25CYXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAENsb3NlAERpc3Bvc2UA
RWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJO
b25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0
dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRl
AFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUA
QXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmli
dXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBT
U0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRl
AFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAGdldF9WYWx1ZQB2YWx1ZQBTeXN0ZW0uUnVu
dGltZS5WZXJzaW9uaW5nAFRvU3RyaW5nAGRlYnVnAE1hdGNoAGRpcmVjdG9yeVBhdGgAZmlsZXBh
dGgATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRz
LlRhc2tzLlNjcmlwdFRhc2sAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVs
AFNUXzY5ZTQyOTZlZWFkNTRlODA4OTM5MWE4YWM5MWM3OTBlLmRsbABGaWxsAGluc2VydERhdGFU
b1NxbABnZXRfSXRlbQBTeXN0ZW0ARW51bQByZXNvdXJjZU1hbgBCb29sZWFuAE9wZW4AU2NyaXB0
TWFpbgBGaXJlSW5mb3JtYXRpb24AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6
YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24ARGF0YVRhYmxlQ29sbGVjdGlvbgBEYXRhUm93Q29sbGVj
dGlvbgBPbGVEYkNvbm5lY3Rpb24AU3FsQ29ubmVjdGlvbgBOdWxsUmVmZXJlbmNlRXhjZXB0aW9u
AFN5c3RlbS5EYXRhLkNvbW1vbgBDdWx0dXJlSW5mbwBNZW1iZXJJbmZvAERpcmVjdG9yeUluZm8A
R3JvdXAAQ2hhcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAEV2ZW50c09iamVjdFdyYXBwZXIAT2xlRGJE
YXRhQWRhcHRlcgBXcml0ZVRvU2VydmVyAEZpcmVFcnJvcgBwcmludEVycm9yAElFbnVtZXJhdG9y
AEdldEVudW1lcmF0b3IALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0uUnVu
dGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1RfNjllNDI5NmVlYWQ1NGU4
MDg5MzkxYThhYzkxYzc5MGUuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2lu
Z01vZGVzAHJlYWREaXJlY3RvcmllcwBHZXREaXJlY3RvcmllcwBTVF82OWU0Mjk2ZWVhZDU0ZTgw
ODkzOTFhOGFjOTFjNzkwZS5Qcm9wZXJ0aWVzAGdldF9UYWJsZXMAZ2V0X1ZhcmlhYmxlcwBHZXRG
aWxlcwBTZXR0aW5ncwBFcXVhbHMAU3lzdGVtLlRleHQuUmVndWxhckV4cHJlc3Npb25zAFN5c3Rl
bS5Db2xsZWN0aW9ucwBnZXRfU3VjY2VzcwBnZXRfRHRzAFNjcmlwdFJlc3VsdHMAZ2V0X0V2ZW50
cwBFeGlzdHMAZ2V0X1Jvd3MAQ29uY2F0AE9iamVjdABEYXRhU2V0AFNwbGl0AGdldF9EZWZhdWx0
AHNldF9UYXNrUmVzdWx0AFN5c3RlbS5EYXRhLlNxbENsaWVudABHZXRQYXJlbnQAZ2V0X0N1cnJl
bnQAZmlyc3QAcHJpbnRUb091dHB1dABNb3ZlTmV4dABEYXRhUm93AFJlZ2V4AGdldF9Bc3NlbWJs
eQBTcWxCdWxrQ29weQBFeGVjdXRlTm9uUXVlcnkARGlyZWN0b3J5AG9wX0VxdWFsaXR5AEVtcHR5
AAAAAAtkAGUAYgB1AGcAAAlUAHIAdQBlAAARUwB0AGEAcgB0AGkAbgBnAAARUgBvAG8AdABwAGEA
dABoAAA3RABvAG4AZQAgAHIAZQBhAGQAaQBuAGcAIAB3AGkAdABoACAAbQBlAHMAcwBhAGcAZQA6
ACAAADtSAGUAYQBkAGkAbgBnACAAZABpAHIAZQBjAHQAbwByAHkAIAB3AGkAdABoACAAcABhAHQA
aAA6ACAAAA0qAC4AeABsAHMAeAAAGUYAaQBsAGUAIABmAG8AdQBuAGQAOgAgAAALMAAwADAAMAAw
AAApRQB4AGMAZQBsAGYAaQBsAGUAIAB3AGkAdABoACAAcABhAHQAaAAgAAA7IABkAG8AZQBzAG4A
JwB0ACAAZgBvAGwAbABvAHcAIAB0AGgAZQAgAHMAdABhAG4AZABhAHIAZAAuAAEDKgAAI0QAaQBy
AGUAYwB0AG8AcgB5ACAAZgBvAHUAbgBkADoAIAAAJUYAaQBuAGkAcwBoAGUAZAAgAHIAZQBhAGQA
aQBuAGcAOgAgAAAXRQB4AGMAZQBwAHQAaQBvAG4AOgAgAABFWwBhAC0AegBBAC0AWgBdAFsAYQAt
AHoAQQAtAFoAXQBbAGEALQB6AEEALQBaAF0AWwAwAC0AOQBdAFsAMAAtADkAXQABA1wAAAEAF3QA
YQBiAGwAZQBDAG8AZABlADoAIAAAPVIAZQBhAGQAaQBuAGcAIABlAHgAYwBlAGwAIABmAGkAbABl
ACAAdwBpAHQAaAAgAHAAYQB0AGgAOgAgAAAxTQBpAGMAcgBvAHMAbwBmAHQALgBBAEMARQAuAE8A
TABFAEQAQgAuADEAMgAuADAAABVFAHgAYwBlAGwAIAAxADIALgAwAAATUAByAG8AdgBpAGQAZQBy
AD0AABs7AEQAYQB0AGEAIABTAG8AdQByAGMAZQA9AAArOwBFAHgAdABlAG4AZABlAGQAIABQAHIA
bwBwAGUAcgB0AGkAZQBzAD0AADFPAHAAZQBuAGkAbgBnACAAZQB4AGMAZQBsACAAYwBvAG4AbgBl
AGMAdABpAG8AbgAADVQAYQBiAGwAZQBzAAAVVABBAEIATABFAF8ATgBBAE0ARQAAB2QAYgAkAAAn
cwBlAGwAZQBjAHQAIAAqACAAZgByAG8AbQAgAFsAZABiACQAXQAAR0MAbABvAHMAaQBuAGcAIABl
AHgAYwBlAGwAIABjAG8AbgBuAGUAYwB0AGkAbwBuACAAaQBuACAAZgBvAHIAZQBhAGMAaAAAP04A
bwAgAHMAaABlAGUAdAAgAHcAaQB0AGgAIAB0AGgAZQAgAG4AYQBtAGUAIAAnAGQAYgAnACAAaQBu
ACAAATFDAGwAbwBzAGkAbgBnACAAZQB4AGMAZQBsACAAYwBvAG4AbgBlAGMAdABpAG8AbgAAD2QA
YgBvAC4ASwBTAF8AAICHUwBlAHIAdgBlAHIAPQB2AGsALQBzAHgAZAAwAGUALQAwADAAMgA7AEQA
YQB0AGEAYgBhAHMAZQA9AFMAdABhAGcAaQBuAGcAXwBBAFMAUwBTADsASQBuAHQAZQBnAHIAYQB0
AGUAZAAgAFMAZQBjAHUAcgBpAHQAeQA9AHQAcgB1AGUAOwABH3QAcgB1AG4AYwBhAHQAZQAgAHQA
YQBiAGwAZQAgAAAlTwBwAGUAbgBpAG4AZwAgAGMAbwBuAG4AZQBjAHQAaQBvAG4AACVEAGEAdABh
AHQAYQBiAGwAZQAgAGkAcwAgAG4AdQBsAGwALgAAJVQAcgB1AG4AYwBhAHQAaQBuAGcAIAB0AGEA
YgBsAGUAOgAgAAAnQgB1AGwAawBDAG8AcAB5ACAAdABvACAAdABhAGIAbABlADoAIAAAPyAAdwBo
AGUAbgAgAGkAbgBzAGUAcgB0AGkAbgBnACAAZABhAHQAYQAgAGYAcgBvAG0AIABmAGkAbABlACAA
ACVDAGwAbwBzAGkAbgBnACAAYwBvAG4AbgBlAGMAdABpAG8AbgAAcVMAVABfADYAOQBlADQAMgA5
ADYAZQBlAGEAZAA1ADQAZQA4ADAAOAA5ADMAOQAxAGEAOABhAGMAOQAxAGMANwA5ADAAZQAuAFAA
cgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAlWWHaeYuHEiHGlXsa3cBwAAE
IAEBCAMgAAEFIAEBEREEIAEBDgUgAQEReQUHAw4CAgUAABKAiQMgAA4FIAASgJEFIAASgJUGIAES
gJkcAyAAHAQgAQIOBQACDg4OEAcLAgIODhI9HQ4IDg4CEkEGAAIdDg4OBgADDg4ODgYHAxJFDg4G
AAESgK0OBSACDg4OBiABHQ4dAwYgARKAtQ4DIAACFAcLDg4ODhJJEk0SURJVEj0SWRJBBQABDh0O
BAABAg4FIAESPQ4FIAASgMUEIAASTQQgARwOBQACAg4OBiACAQ4SSQYgAQESgNEFIAEIElUFIAAS
gNkFIAESPQgMBwcODg4SXRJhEkECBSABARJdBiACAQ4SXQMgAAgFIAEBEj0HAAQODg4ODgUgABKA
5QogBgEIDg4OCBACAgYOCCAFAggODg4ICAABEoDpEYDtBSAAEoDxByACAQ4SgPEIt3pcVhk04IkI
iYRdzYCAzJEEAAAAAAQBAAAAAwYScQMGEnUDBhIQAgYIAwYRFAUgAgIOAgUgAg4OAgYgAhI9DgIJ
IAUCDhI9DgICBiADAQ4OAgUgAgEODgQAABJxBAAAEnUFAAEBEnUEAAASEAMAAAEECAAScQQIABJ1
BAgAEhAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEA
I1NUXzY5ZTQyOTZlZWFkNTRlODA4OTM5MWE4YWM5MWM3OTBlAAAFAQAAAAAWAQARQ29weXJpZ2h0
IEAgIDIwMjMAAEkBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuNQEAVA4URnJhbWV3b3JrRGlz
cGxheU5hbWUSLk5FVCBGcmFtZXdvcmsgNC41tAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3Vy
Y2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5l
dXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5S
dW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAChAAAAAAAAAAAAAAEJAAAAA
IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0QAAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUu
ZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAA
AAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWGAA
ABoEAAAAAAAAAAAAABoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+
AAABAAAAAQDwfOYhAAABAPB85iE/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBh
AHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAA
sAR6AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABWAwAAAQAwADAAMAAwADAANABi
ADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEA
bQBlAAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABf
ADYAOQBlADQAMgA5ADYAZQBlAGEAZAA1ADQAZQA4ADAAOAA5ADMAOQAxAGEAOABhAGMAOQAxAGMA
NwA5ADAAZQAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA4ADYANwA4
AC4AMwAxADkAOAA0AAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfADYA
OQBlADQAMgA5ADYAZQBlAGEAZAA1ADQAZQA4ADAAOAA5ADMAOQAxAGEAOABhAGMAOQAxAGMANwA5
ADAAZQAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAA
eQByAGkAZwBoAHQAIABAACAAIAAyADAAMgAzAAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBt
AGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAA
UwBUAF8ANgA5AGUANAAyADkANgBlAGUAYQBkADUANABlADgAMAA4ADkAMwA5ADEAYQA4AGEAYwA5
ADEAYwA3ADkAMABlAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMA
VABfADYAOQBlADQAMgA5ADYAZQBlAGEAZAA1ADQAZQA4ADAAOAA5ADMAOQAxAGEAOABhAGMAOQAx
AGMANwA5ADAAZQAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4A
OAA2ADcAOAAuADMAMQA5ADgANAAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBp
AG8AbgAAADEALgAwAC4AOAA2ADcAOAAuADMAMQA5ADgANAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAwAAABUMAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="158,42"
          Id="Package\Sequence Container\Les inn excelfiler"
          TopLeft="67.5,36" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="271,201"
          Size="271,244"
          Id="Package\Sequence Container"
          TopLeft="464,201" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>