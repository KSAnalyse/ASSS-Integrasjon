<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="8/30/2023 12:15:47 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="VK-C0D1E-046"
  DTS:CreatorName="I04\vk300"
  DTS:DTSID="{CAC5197C-BF18-4DAA-99AF-8B2DDFE88003}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.170"
  DTS:LocaleID="1044"
  DTS:ObjectName="KS excelfiler"
  DTS:PackageType="5"
  DTS:ProtectionLevel="0"
  DTS:VersionBuild="119"
  DTS:VersionGUID="{4E3505D3-67DD-4FAC-8C7F-87A2B8AA7DE8}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{DCED46C2-1D1C-4CE8-BF2B-89AE64D02F5C}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="debug">
      <DTS:VariableValue
        DTS:DataType="11">-1</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{1A6EB4A6-ECEA-4630-9D56-1383DCD5F5D3}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Rootpath">
      <DTS:VariableValue
        DTS:DataType="8">\\vk-sxd0e-002\E\Utvekslingsfiler\ASSS\Manuelt innsamlede tall</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Sequence Container"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{A26B8DB8-7AB4-4C90-B381-822B490B5717}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Sequence Container">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Sequence Container\Les inn excelfiler"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{FCEF1094-5E1B-46AA-B21A-4007C54A11D8}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Les inn excelfiler"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_69e4296eead54e8089391a8ac91c790e"
              VSTAMajorVersion="15"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::debug,User::Rootpath">
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.IO;
using System.Data;
using System.Data.SqlClient;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Data.OleDb;
#endregion

namespace ST_69e4296eead54e8089391a8ac91c790e
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
			string methodName;
			bool printDebugMessage, result;

			methodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
			printDebugMessage = Dts.Variables["debug"].Value.ToString().Equals("True");

			printToOutput(methodName, "Starting", printDebugMessage);

			// if nothing fails, true
			result = readDirectories(Dts.Variables["Rootpath"].Value.ToString(), printDebugMessage);

			printToOutput(methodName, "Done reading with message: " + result, printDebugMessage);

			if (result)
			{
				Dts.TaskResult = (int)ScriptResults.Success;
			} else
			{
				Dts.TaskResult = (int)ScriptResults.Failure;
			}

			
		}

		/// <summary>
		/// Goes through all subdirectories in root. Calls insertDataToSql for each .xlsx file in the directory.
		/// Returns false if an exception occurs, else true.
		/// </summary>
		public bool readDirectories(string path, bool debug)
		{
			bool first = true, result;
			string methodName, tableCode;
			string[] dirs, files;
			DataTable excelTable;

			methodName = System.Reflection.MethodBase.GetCurrentMethod().Name;

			try
			{
				printToOutput(methodName, "Reading directory with path: " + path, debug);

				// only want .xlsx files
				files = Directory.GetFiles(path, "*.xlsx");
				
				// loop through the files in the directory
				foreach (string filepath in files)
				{
					printToOutput(methodName, "File found: " + filepath, debug);

					// the table code in the database should be in the beginning of the directory name
					tableCode = getTableCode(path, debug);

					excelTable = readExcelFile(filepath, true);

					// break the loop if there's an error
					if (excelTable == null)
						throw new NullReferenceException("Excelfile with path " + filepath + " doesn't follow the standard.");
					

					insertDataToSql(tableCode, excelTable, first, debug);

					first = false;
				}

				dirs = Directory.GetDirectories(path, "*");

				// loop through the subdirectories
				foreach (string dirpath in dirs)
				{
					printToOutput(methodName, "Directory found: " + dirpath, debug);
					result = readDirectories(dirpath, true);

					// break the loop if there's an error
					if (!result)
						return result;
				}

				printToOutput(methodName, "Finished reading: " + path, debug);
				return true;

			} catch (Exception e)
			{
				printError(methodName, "Exception: " + e.Message);
				return false;
			}
		}

		public string getTableCode(string directoryPath, bool debug)
		{
			string methodName, tableName, tableCode;

			methodName = methodName = System.Reflection.MethodBase.GetCurrentMethod().Name;

			// get the tablename by removing the path of the parentfolder + '\'
			tableName = directoryPath.Replace(Directory.GetParent(directoryPath).ToString() + "\\", "");

			// get the tablecode by just getting everything before the first white space
			tableCode = tableName.Split(' ')[0];

			printToOutput(methodName, "tableName: " + tableCode, debug);

			return tableCode;
		}

		public DataTable readExcelFile(string path, bool debug)
		{
			string connectionString, methodName, provider, properties;
			OleDbConnection excelConnection;
			OleDbCommand sqlQuery;
			DataTable excelTables;

			methodName = methodName = System.Reflection.MethodBase.GetCurrentMethod().Name;

			try
			{
				printToOutput(methodName, "Reading excel file with path: " + path, debug);

				provider = "Microsoft.ACE.OLEDB.12.0";
				properties = "Excel 12.0";

				connectionString = $"Provider={provider};Data Source={path};Extended Properties={properties}";

				if (File.Exists(path))
				{
					excelConnection = new OleDbConnection(connectionString);
					excelConnection.Open();

					printToOutput(methodName, "Opening excel connection", debug);

					excelTables = excelConnection.GetSchema("Tables");

					
					foreach (DataRow excelTable in excelTables.Rows)
					{
						// find the correct sheet
						if (excelTable["TABLE_NAME"].ToString() == "db$")
						{
							sqlQuery = new OleDbCommand("select * from [db$]", excelConnection);
							using (OleDbDataAdapter da = new OleDbDataAdapter(sqlQuery))
							{
								DataSet dataset = new DataSet();
								da.Fill(dataset);

								printToOutput(methodName, "Closing excel connection in foreach", debug);
								excelConnection.Close();
								return dataset.Tables[0];
							}

						} else
						{
							printError(methodName, "No sheet with the name 'db'");
						}
					}

					printToOutput(methodName, "Closing excel connection", debug);
					excelConnection.Close();
				}

				return null;
			}
			catch (Exception e)
			{
				printError(methodName, "Exception: " + e.Message);
				return null;
			}

		}

		public bool insertDataToSql(string tableCode, DataTable excelData, bool first, bool debug)
		{
			string destinationTable, methodName, sqlConnectionString, sqlTruncateString;
			SqlCommand truncate;

			destinationTable = "dbo.KS_" + tableCode;
			methodName = methodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
			sqlConnectionString = "Server=vk-sxd0e-002;Database=Staging_ASSS;Integrated Security=true;";
			sqlTruncateString = "truncate table " + destinationTable;

			using (SqlConnection connection = new SqlConnection(sqlConnectionString))
			{
				printToOutput(methodName, "Opening connection", debug);
				connection.Open();

				using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connection))
				{
					try
					{
						if (excelData == null)
						{
							connection.Close();
							throw new NullReferenceException("Datatable is null.");
						}

						if (first)
						{
							printToOutput(methodName, "Truncating table: " + destinationTable, debug);
							truncate = new SqlCommand(sqlTruncateString, connection);
							truncate.ExecuteNonQuery();
						}

						printToOutput(methodName, "BulkCopy to table: " + destinationTable, debug);
						bulkCopy.DestinationTableName = destinationTable;

						bulkCopy.WriteToServer(excelData);
					}
					catch (Exception e)
					{
						connection.Close();
						printError(methodName, "Exception: " + e.Message);
						return false;
					}

				}

				printToOutput(methodName, "Closing connection", debug);
				connection.Close();
				return true;
			} 
		}

		public void printToOutput(string functionName, string message, bool debug)
		{
			if (debug)
				Dts.Events.FireInformation(1, functionName, message, "", 0, ref debug);
		}

		public void printError(string functionName, string message)
		{
			Dts.Events.FireError(0, functionName, message, String.Empty, 0);
		}


		#region ScriptResults declaration
		/// <summary>
		/// This enum provides a convenient shorthand within the scope of this class for setting the
		/// result of the script.
		/// 
		/// This code was generated automatically.
		/// </summary>
		enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="ST_69e4296eead54e8089391a8ac91c790e.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{94841FCE-99B3-4667-B436-55E2AD7FEE8D}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_69e4296eead54e8089391a8ac91c790e</RootNamespace>
    <AssemblyName>ST_69e4296eead54e8089391a8ac91c790e</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Microsoft.SharePoint.Client, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c, processorArchitecture=MSIL" />
    <Reference Include="Microsoft.SharePoint.Client.Runtime, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c, processorArchitecture=MSIL" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_69e4296eead54e8089391a8ac91c790e</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_69e4296eead54e8089391a8ac91c790e</msb:DisplayName>
    <msb:ProjectId>{1968953F-ED23-4DA0-8B41-11B6199863FE}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_69e4296eead54e8089391a8ac91c790e.csproj" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_69e4296eead54e8089391a8ac91c790e.Properties.Settings.get_Default():ST_69e4296eead54e8089391a8ac91c790e.Properties.Sett" +
    "ings")]

namespace ST_69e4296eead54e8089391a8ac91c790e.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_69e4296eead54e8089391a8ac91c790e")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_69e4296eead54e8089391a8ac91c790e")]
[assembly: AssemblyCopyright("Copyright @  2023")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_69e4296eead54e8089391a8ac91c790e.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_69e4296eead54e8089391a8ac91c790e.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_69e4296eead54e8089391a8ac91c790e.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_69e4296eead54e8089391a8ac91c790e.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_69e4296eead54e8089391a8ac91c790e.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_69e4296eead54e8089391a8ac91c790e.dll">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
Pwd9AAMADQADAQAAwwcAAGEABAAQABEA/wRZAREAywFdAREAywBhAQYGMwBlAVaAswdoAVaAqwFo
AVAgAAAAAIYAHgUGAAEA/CAAAAAAhgAgB2wBAQA4IgAAAACGANsAcgEDAJwiAAAAAIYASQF4AQUA
fCQAAAAAhgDaBH8BBwC0JQAAAACGAFUIiAELANQlAAAAAIYAWAaPAQ4A8CUAAAAAhhh9BgYAEAD4
JQAAAACDGH0GBgAQAAAmAAAAAJMIBwaVARAALCYAAAAAkwizAZoBEAAzJgAAAACTCL8BnwEQADsm
AAAAAJYICAilAREAQiYAAAAAhhh9BgYAEQBKJgAAAACRGIMGqgERAAAAAQA4BAAAAgAkBAAAAQAq
BAAAAgAkBAAAAQA4BAAAAgAkBAAAAQDoAAAAAgBRAAAAAwBPCAAABAAkBAAAAQB5AQAAAgD+AAAA
AwAkBAAAAQB5AQAAAgD+AAAAAQD7AwkAfQYBABEAfQYGABkAfQYKACkAfQYQADEAfQYQADkAfQYQ
AEEAfQYQAEkAfQYQAFEAfQYQAFkAfQYQAGEAfQYQAGkAfQYGAMkAfQYGAPEAfQYVAAEBfQYGAAkB
jgAhABEBVwEnAHEAuwcrABkBeQcxACEB6gQ3ACkB8QM+ANEAGwQnADEBmQdCADkBGwQnADEB7AdH
ABkBFAgBAEEBhwdeADEB7AdlAEkBfQYQAEEBMAdeAIEA8gAnAEEBOQhxADEBwwB4ADEBAgh+ADEB
7AeaAGEB3AegAIkAfQYQAGkBEwUGAGkBOwClAHkA4werAHkBbwaxAJEAQwg+AIEB6gS2ADEBpwi7
AIkBfQbBAJkAfQbIAKEAfQYGAJEB1QTPAGkBNQIGAKEAbgfVAJkB6gTbAKkAOwIGAJEAYwjhALEA
fQYQALkAfQbyAKEBfQb4AKkBjQj/ALkAYAEQALkAQAYDARkB0QcJAbEBIwUPATEBswgaAbEBTgYd
AXEAfQYGANEAfQYGALkBNwEmAbkBdAgvAdkAfQY1AfkAfQYGAAgAFABPAQgAGABUASkAcwDlAS4A
CwC9AS4AEwDGAS4AGwDlAS4AIwDuAS4AKwAXAi4AMwAXAi4AOwAXAi4AQwDuAS4ASwAdAi4AUwAX
Ai4AWwA0AkMAYwBUAUkAcwDlAWEAewBUAWMAawBUARsATQBsAIUA5QADAAEABAADAAAACwauAQAA
0wGzAQAADAi4AQIACgADAAIACwAFAAEADAAFAAIADQAHAASAAAABAAAA3CEUUgAAAAAAAJ8AAAAE
AAAAAAAAAAAAAAA9AW0AAAAAAA4AAAAAAAAAAAAAAEYBPQQAAAAABAAAAAAAAAAAAAAAPQFFAAAA
AAAEAAAAAAAAAAAAAAA9AfMEAAAAAA4AAAAAAAAAAAAAAEYBFAAAAAAAAAAAAAEAAADOBgAABQAC
AAAAAAAAPE1vZHVsZT4AU3lzdGVtLklPAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwB2
YWx1ZV9fAEdldFNjaGVtYQBTeXN0ZW0uRGF0YQBleGNlbERhdGEAU3lzdGVtLkRhdGEuT2xlRGIA
bXNjb3JsaWIAT2xlRGJDb21tYW5kAFNxbENvbW1hbmQAR2V0Q3VycmVudE1ldGhvZABTVF82OWU0
Mjk2ZWVhZDU0ZTgwODkzOTFhOGFjOTFjNzkwZQBSZXBsYWNlAGRlZmF1bHRJbnN0YW5jZQBnZXRU
YWJsZUNvZGUAdGFibGVDb2RlAGdldF9NZXNzYWdlAG1lc3NhZ2UARGF0YVRhYmxlAFZhcmlhYmxl
AElEaXNwb3NhYmxlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAHJlYWRFeGNl
bEZpbGUAZ2V0X05hbWUAc2V0X0Rlc3RpbmF0aW9uVGFibGVOYW1lAGZ1bmN0aW9uTmFtZQBNaWNy
b3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lAFR5cGUARmFpbHVyZQBnZXRfQ3VsdHVyZQBzZXRf
Q3VsdHVyZQByZXNvdXJjZUN1bHR1cmUATWV0aG9kQmFzZQBWU1RBUlRTY3JpcHRPYmplY3RNb2Rl
bEJhc2UASW50ZXJuYWxEYXRhQ29sbGVjdGlvbkJhc2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UA
Q2xvc2UARGlzcG9zZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJp
YnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRp
dG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFk
ZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJh
dGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVs
YXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJp
Z2h0QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNv
bXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAZ2V0X1ZhbHVlAHZh
bHVlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVG9TdHJpbmcAZGVidWcAZGlyZWN0b3J5UGF0
aABwYXRoAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVy
LkR0cy5UYXNrcy5TY3JpcHRUYXNrAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRN
b2RlbABTVF82OWU0Mjk2ZWVhZDU0ZTgwODkzOTFhOGFjOTFjNzkwZS5kbGwARmlsbABpbnNlcnRE
YXRhVG9TcWwAZ2V0X0l0ZW0AU3lzdGVtAEVudW0AcmVzb3VyY2VNYW4AQm9vbGVhbgBPcGVuAFNj
cmlwdE1haW4ARmlyZUluZm9ybWF0aW9uAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9i
YWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAERhdGFUYWJsZUNvbGxlY3Rpb24ARGF0YVJvd0Nv
bGxlY3Rpb24AT2xlRGJDb25uZWN0aW9uAFNxbENvbm5lY3Rpb24ATnVsbFJlZmVyZW5jZUV4Y2Vw
dGlvbgBTeXN0ZW0uRGF0YS5Db21tb24AQ3VsdHVyZUluZm8ATWVtYmVySW5mbwBEaXJlY3RvcnlJ
bmZvAENoYXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBFdmVudHNPYmplY3RXcmFwcGVyAE9sZURiRGF0
YUFkYXB0ZXIAV3JpdGVUb1NlcnZlcgBGaXJlRXJyb3IAcHJpbnRFcnJvcgBJRW51bWVyYXRvcgBH
ZXRFbnVtZXJhdG9yAC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRp
bWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNUXzY5ZTQyOTZlZWFkNTRlODA4
OTM5MWE4YWM5MWM3OTBlLlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdN
b2RlcwByZWFkRGlyZWN0b3JpZXMAR2V0RGlyZWN0b3JpZXMAU1RfNjllNDI5NmVlYWQ1NGU4MDg5
MzkxYThhYzkxYzc5MGUuUHJvcGVydGllcwBnZXRfVGFibGVzAGdldF9WYXJpYWJsZXMAR2V0Rmls
ZXMAU2V0dGluZ3MARXF1YWxzAFN5c3RlbS5Db2xsZWN0aW9ucwBTdWNjZXNzAGdldF9EdHMAU2Ny
aXB0UmVzdWx0cwBnZXRfRXZlbnRzAEV4aXN0cwBnZXRfUm93cwBDb25jYXQAT2JqZWN0AERhdGFT
ZXQAU3BsaXQAZ2V0X0RlZmF1bHQAc2V0X1Rhc2tSZXN1bHQAU3lzdGVtLkRhdGEuU3FsQ2xpZW50
AEdldFBhcmVudABnZXRfQ3VycmVudABmaXJzdABwcmludFRvT3V0cHV0AE1vdmVOZXh0AERhdGFS
b3cAZ2V0X0Fzc2VtYmx5AFNxbEJ1bGtDb3B5AEV4ZWN1dGVOb25RdWVyeQBEaXJlY3RvcnkAb3Bf
RXF1YWxpdHkARW1wdHkAAAAAAAtkAGUAYgB1AGcAAAlUAHIAdQBlAAARUwB0AGEAcgB0AGkAbgBn
AAARUgBvAG8AdABwAGEAdABoAAA3RABvAG4AZQAgAHIAZQBhAGQAaQBuAGcAIAB3AGkAdABoACAA
bQBlAHMAcwBhAGcAZQA6ACAAADtSAGUAYQBkAGkAbgBnACAAZABpAHIAZQBjAHQAbwByAHkAIAB3
AGkAdABoACAAcABhAHQAaAA6ACAAAA0qAC4AeABsAHMAeAAAGUYAaQBsAGUAIABmAG8AdQBuAGQA
OgAgAAApRQB4AGMAZQBsAGYAaQBsAGUAIAB3AGkAdABoACAAcABhAHQAaAAgAAA7IABkAG8AZQBz
AG4AJwB0ACAAZgBvAGwAbABvAHcAIAB0AGgAZQAgAHMAdABhAG4AZABhAHIAZAAuAAEDKgAAI0QA
aQByAGUAYwB0AG8AcgB5ACAAZgBvAHUAbgBkADoAIAAAJUYAaQBuAGkAcwBoAGUAZAAgAHIAZQBh
AGQAaQBuAGcAOgAgAAAXRQB4AGMAZQBwAHQAaQBvAG4AOgAgAAADXAAAAQAXdABhAGIAbABlAE4A
YQBtAGUAOgAgAAA9UgBlAGEAZABpAG4AZwAgAGUAeABjAGUAbAAgAGYAaQBsAGUAIAB3AGkAdABo
ACAAcABhAHQAaAA6ACAAADFNAGkAYwByAG8AcwBvAGYAdAAuAEEAQwBFAC4ATwBMAEUARABCAC4A
MQAyAC4AMAAAFUUAeABjAGUAbAAgADEAMgAuADAAABNQAHIAbwB2AGkAZABlAHIAPQAAGzsARABh
AHQAYQAgAFMAbwB1AHIAYwBlAD0AACs7AEUAeAB0AGUAbgBkAGUAZAAgAFAAcgBvAHAAZQByAHQA
aQBlAHMAPQAAMU8AcABlAG4AaQBuAGcAIABlAHgAYwBlAGwAIABjAG8AbgBuAGUAYwB0AGkAbwBu
AAANVABhAGIAbABlAHMAABVUAEEAQgBMAEUAXwBOAEEATQBFAAAHZABiACQAACdzAGUAbABlAGMA
dAAgACoAIABmAHIAbwBtACAAWwBkAGIAJABdAABHQwBsAG8AcwBpAG4AZwAgAGUAeABjAGUAbAAg
AGMAbwBuAG4AZQBjAHQAaQBvAG4AIABpAG4AIABmAG8AcgBlAGEAYwBoAAA3TgBvACAAcwBoAGUA
ZQB0ACAAdwBpAHQAaAAgAHQAaABlACAAbgBhAG0AZQAgACcAZABiACcAATFDAGwAbwBzAGkAbgBn
ACAAZQB4AGMAZQBsACAAYwBvAG4AbgBlAGMAdABpAG8AbgAAD2QAYgBvAC4ASwBTAF8AAICHUwBl
AHIAdgBlAHIAPQB2AGsALQBzAHgAZAAwAGUALQAwADAAMgA7AEQAYQB0AGEAYgBhAHMAZQA9AFMA
dABhAGcAaQBuAGcAXwBBAFMAUwBTADsASQBuAHQAZQBnAHIAYQB0AGUAZAAgAFMAZQBjAHUAcgBp
AHQAeQA9AHQAcgB1AGUAOwABH3QAcgB1AG4AYwBhAHQAZQAgAHQAYQBiAGwAZQAgAAAlTwBwAGUA
bgBpAG4AZwAgAGMAbwBuAG4AZQBjAHQAaQBvAG4AACVEAGEAdABhAHQAYQBiAGwAZQAgAGkAcwAg
AG4AdQBsAGwALgAAJVQAcgB1AG4AYwBhAHQAaQBuAGcAIAB0AGEAYgBsAGUAOgAgAAAnQgB1AGwA
awBDAG8AcAB5ACAAdABvACAAdABhAGIAbABlADoAIAAAJUMAbABvAHMAaQBuAGcAIABjAG8AbgBu
AGUAYwB0AGkAbwBuAABxUwBUAF8ANgA5AGUANAAyADkANgBlAGUAYQBkADUANABlADgAMAA4ADkA
MwA5ADEAYQA4AGEAYwA5ADEAYwA3ADkAMABlAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBz
AG8AdQByAGMAZQBzAAAAAOPl8UtZJX5GgugzamDN1sEABCABAQgDIAABBSABARERBCABAQ4FIAEB
EXUFBwMOAgIFAAASgIUDIAAOBSAAEoCNBSAAEoCRBiABEoCVHAMgABwEIAECDgUAAg4ODhAHCwIC
Dg4SPR0OCA4OAhJBBgACHQ4ODgYAAw4ODg4EBwIODgYAARKAqQ4FIAIODg4GIAEdDh0DFAcLDg4O
DhJFEkkSTRJREj0SVRJBBQABDh0OBAABAg4FIAESPQ4FIAASgLkEIAASSQQgARwOBQACAg4OBiAC
AQ4SRQYgAQESgMUFIAEIElEFIAASgM0FIAESPQgDIAACDAcHDg4OElkSXRJBAgUgAQESWQYgAgEO
ElkDIAAIBSABARI9BSAAEoDZCiAGAQgODg4IEAICBg4IIAUCCA4ODggIAAESgN0RgOEFIAASgOUH
IAIBDhKA5Qi3elxWGTTgiQiJhF3NgIDMkQQAAAAABAEAAAADBhJtAwYScQMGEhACBggDBhEUBSAC
Ag4CBSACDg4CBiACEj0OAgggBAIOEj0CAgYgAwEODgIFIAIBDg4EAAASbQQAABJxBQABARJxBAAA
EhADAAABBAgAEm0ECAAScQQIABIQCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhy
b3dzAQgBAAIAAAAAACgBACNTVF82OWU0Mjk2ZWVhZDU0ZTgwODkzOTFhOGFjOTFjNzkwZQAABQEA
AAAAFgEAEUNvcHlyaWdodCBAICAyMDIzAABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjUB
AFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQuNQAAtAAAAM7K774BAAAA
kQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00
LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkj
U3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAA
AOQ+AAAAAAAAAAAAAP4+AAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwPgAAAAAAAAAAAAAAAF9D
b3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQ
AAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhA
AAAaBAAAAAAAAAAAAAAaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv
/gAAAQAAAAEAFFLcIQAAAQAUUtwhPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYA
YQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAA
ALAEegMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAwADQA
YgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBh
AG0AZQAAAAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQA
XwA2ADkAZQA0ADIAOQA2AGUAZQBhAGQANQA0AGUAOAAwADgAOQAzADkAMQBhADgAYQBjADkAMQBj
ADcAOQAwAGUAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4AOAA2ADYA
OAAuADIAMQAwADEAMgAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwA2
ADkAZQA0ADIAOQA2AGUAZQBhAGQANQA0AGUAOAAwADgAOQAzADkAMQBhADgAYQBjADkAMQBjADcA
OQAwAGUALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBw
AHkAcgBpAGcAaAB0ACAAQAAgACAAMgAwADIAMwAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUA
bQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAA
AFMAVABfADYAOQBlADQAMgA5ADYAZQBlAGEAZAA1ADQAZQA4ADAAOAA5ADMAOQAxAGEAOABhAGMA
OQAxAGMANwA5ADAAZQAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABT
AFQAXwA2ADkAZQA0ADIAOQA2AGUAZQBhAGQANQA0AGUAOAAwADgAOQAzADkAMQBhADgAYQBjADkA
MQBjADcAOQAwAGUAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAu
ADgANgA2ADgALgAyADEAMAAxADIAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMA
aQBvAG4AAAAxAC4AMAAuADgANgA2ADgALgAyADEAMAAxADIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAAED8AAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="158,42"
          Id="Package\Sequence Container\Les inn excelfiler"
          TopLeft="67.5,36" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="271,201"
          Size="271,244"
          Id="Package\Sequence Container"
          TopLeft="464,201" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>